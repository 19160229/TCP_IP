<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0046)http://wiki.theory.org/BitTorrentSpecification -->
<HTML lang=en dir=ltr xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>BitTorrentSpecification - TheoryOrg</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META 
content="BitTorrentSpecification,Availability,BitTorrent,BitTorrentTrackerExtensions,BitTorrentWishList,Decoding bencoded data with python,EHeM,DennisHolmes,WikiWordsAre,BitLord,BitPump" 
name=keywords><LINK href="/favicon.ico" rel="shortcut icon"><LINK 
title="TheoryOrg (English)" href="/opensearch_desc.php" 
type=application/opensearchdescription+xml rel=search><LINK 
title="Creative Commons" 
href="/index.php?title=BitTorrentSpecification&amp;action=creativecommons" 
type=application/rdf+xml rel=meta><LINK 
href="http://creativecommons.org/licenses/by/3.0/" rel=copyright>
<STYLE type=text/css media=screen,projection>@import url( /skins/monobook/main.css?63 );
</STYLE>
<LINK media=print 
href="BitTorrentSpecification - TheoryOrg.files/commonPrint.css" type=text/css 
rel=stylesheet><LINK media=handheld 
href="BitTorrentSpecification - TheoryOrg.files/handheld.css" type=text/css 
rel=stylesheet><!--[if lt IE 5.5000]><style type="text/css">@import "/skins/monobook/IE50Fixes.css?63";</style><![endif]--><!--[if IE 5.5000]><style type="text/css">@import "/skins/monobook/IE55Fixes.css?63";</style><![endif]--><!--[if IE 6]>
<STYLE type=text/css>@import url( /skins/monobook/IE60Fixes.css?63 );
</STYLE>
<![endif]--><!--[if IE 7]><style type="text/css">@import "/skins/monobook/IE70Fixes.css?63";</style><![endif]--><!--[if lt IE 7]>
<SCRIPT src="BitTorrentSpecification - TheoryOrg.files/IEFixes.js" 
type=text/javascript></SCRIPT>

<META http-equiv=imagetoolbar content=no><![endif]-->
<SCRIPT type=text/javascript>/*<![CDATA[*/
var skin = "monobook";
var stylepath = "/skins";
var wgArticlePath = "/$1";
var wgScriptPath = "";
var wgServer = "http://wiki.theory.org";
var wgCanonicalNamespace = "";
var wgCanonicalSpecialPageName = false;
var wgNamespaceNumber = 0;
var wgPageName = "BitTorrentSpecification";
var wgTitle = "BitTorrentSpecification";
var wgAction = "view";
var wgArticleId = "1427";
var wgIsArticle = true;
var wgUserName = null;
var wgUserGroups = null;
var wgUserLanguage = "en";
var wgContentLanguage = "en";
var wgBreakFrames = false;
var wgCurRevisionId = "2743";
/*]]>*/</SCRIPT>

<SCRIPT src="BitTorrentSpecification - TheoryOrg.files/wikibits.js" 
type=text/javascript><!-- wikibits js --></SCRIPT>

<SCRIPT src="BitTorrentSpecification - TheoryOrg.files/index.php" 
type=text/javascript><!-- site js --></SCRIPT>

<STYLE type=text/css>@import url( /index.php?title=MediaWiki:Common.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000 );
@import url( /index.php?title=MediaWiki:Monobook.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000 );
@import url( /index.php?title=-&action=raw&gen=css&maxage=18000 );
</STYLE>
<!-- Head Scripts -->
<META content="MSHTML 6.00.2900.3199" name=GENERATOR></HEAD>
<BODY class="mediawiki ns-0 ltr page-BitTorrentSpecification">
<DIV id=globalWrapper>
<DIV id=column-content>
<DIV id=content><A id=top name=top></A>
<H1 class=firstHeading>BitTorrentSpecification</H1>
<DIV id=bodyContent>
<H3 id=siteSub>From TheoryOrg</H3>
<DIV id=contentSub></DIV>
<DIV id=jump-to-nav>Jump to: <A 
href="http://wiki.theory.org/BitTorrentSpecification#column-one">navigation</A>, 
<A 
href="http://wiki.theory.org/BitTorrentSpecification#searchInput">search</A></DIV><!-- start content -->
<P><BIG><BIG><BIG><I><B>Bittorrent Protocol Specification v1.0</B></I> 
</BIG></BIG></BIG></P>
<TABLE class=toc id=toc summary=Contents>
  <TBODY>
  <TR>
    <TD>
      <DIV id=toctitle>
      <H2>Contents</H2></DIV>
      <UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Identification"><SPAN 
        class=tocnumber>1</SPAN> <SPAN class=toctext>Identification</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Purpose"><SPAN 
        class=tocnumber>2</SPAN> <SPAN class=toctext>Purpose</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Scope"><SPAN 
        class=tocnumber>3</SPAN> <SPAN class=toctext>Scope</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Related_Documents"><SPAN 
        class=tocnumber>4</SPAN> <SPAN class=toctext>Related 
        Documents</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Conventions"><SPAN 
        class=tocnumber>5</SPAN> <SPAN class=toctext>Conventions</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#bencoding"><SPAN 
        class=tocnumber>6</SPAN> <SPAN class=toctext>bencoding</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#byte_strings"><SPAN 
          class=tocnumber>6.1</SPAN> <SPAN class=toctext>byte strings</SPAN></A> 

          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#integers"><SPAN 
          class=tocnumber>6.2</SPAN> <SPAN class=toctext>integers</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#lists"><SPAN 
          class=tocnumber>6.3</SPAN> <SPAN class=toctext>lists</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#dictionaries"><SPAN 
          class=tocnumber>6.4</SPAN> <SPAN class=toctext>dictionaries</SPAN></A> 

          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#implementations"><SPAN 
          class=tocnumber>6.5</SPAN> <SPAN 
          class=toctext>implementations</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Metainfo_File_Structure"><SPAN 
        class=tocnumber>7</SPAN> <SPAN class=toctext>Metainfo File 
        Structure</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Info_Dictionary"><SPAN 
          class=tocnumber>7.1</SPAN> <SPAN class=toctext>Info 
          Dictionary</SPAN></A> 
          <UL>
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#Info_in_Single_File_Mode"><SPAN 
            class=tocnumber>7.1.1</SPAN> <SPAN class=toctext>Info in Single File 
            Mode</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#Info_in_Multiple_File_Mode"><SPAN 
            class=tocnumber>7.1.2</SPAN> <SPAN class=toctext>Info in Multiple 
            File Mode</SPAN></A> </LI></UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Notes"><SPAN 
          class=tocnumber>7.2</SPAN> <SPAN class=toctext>Notes</SPAN></A> 
        </LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Tracker_HTTP.2FHTTPS_Protocol"><SPAN 
        class=tocnumber>8</SPAN> <SPAN class=toctext>Tracker HTTP/HTTPS 
        Protocol</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Tracker_Request_Parameters"><SPAN 
          class=tocnumber>8.1</SPAN> <SPAN class=toctext>Tracker Request 
          Parameters</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Tracker_Response"><SPAN 
          class=tocnumber>8.2</SPAN> <SPAN class=toctext>Tracker 
          Response</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Tracker_.27scrape.27_Convention"><SPAN 
        class=tocnumber>9</SPAN> <SPAN class=toctext>Tracker 'scrape' 
        Convention</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Unofficial_extensions_to_scrape"><SPAN 
          class=tocnumber>9.1</SPAN> <SPAN class=toctext>Unofficial extensions 
          to scrape</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Peer_wire_protocol_.28TCP.29"><SPAN 
        class=tocnumber>10</SPAN> <SPAN class=toctext>Peer wire protocol 
        (TCP)</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Overview"><SPAN 
          class=tocnumber>10.1</SPAN> <SPAN class=toctext>Overview</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Data_Types"><SPAN 
          class=tocnumber>10.2</SPAN> <SPAN class=toctext>Data Types</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Message_flow"><SPAN 
          class=tocnumber>10.3</SPAN> <SPAN class=toctext>Message 
          flow</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Handshake"><SPAN 
          class=tocnumber>10.4</SPAN> <SPAN class=toctext>Handshake</SPAN></A> 
          <UL>
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#peer_id"><SPAN 
            class=tocnumber>10.4.1</SPAN> <SPAN class=toctext>peer_id</SPAN></A> 
            </LI></UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Messages"><SPAN 
          class=tocnumber>10.5</SPAN> <SPAN class=toctext>Messages</SPAN></A> 
          <UL>
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#keep-alive:_.3Clen.3D0000.3E"><SPAN 
            class=tocnumber>10.5.1</SPAN> <SPAN class=toctext>keep-alive: 
            &lt;len=0000&gt;</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#choke:_.3Clen.3D0001.3E.3Cid.3D0.3E"><SPAN 
            class=tocnumber>10.5.2</SPAN> <SPAN class=toctext>choke: 
            &lt;len=0001&gt;&lt;id=0&gt;</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#unchoke:_.3Clen.3D0001.3E.3Cid.3D1.3E"><SPAN 
            class=tocnumber>10.5.3</SPAN> <SPAN class=toctext>unchoke: 
            &lt;len=0001&gt;&lt;id=1&gt;</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#interested:_.3Clen.3D0001.3E.3Cid.3D2.3E"><SPAN 
            class=tocnumber>10.5.4</SPAN> <SPAN class=toctext>interested: 
            &lt;len=0001&gt;&lt;id=2&gt;</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#not_interested:_.3Clen.3D0001.3E.3Cid.3D3.3E"><SPAN 
            class=tocnumber>10.5.5</SPAN> <SPAN class=toctext>not interested: 
            &lt;len=0001&gt;&lt;id=3&gt;</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#have:_.3Clen.3D0005.3E.3Cid.3D4.3E.3Cpiece_index.3E"><SPAN 
            class=tocnumber>10.5.6</SPAN> <SPAN class=toctext>have: 
            &lt;len=0005&gt;&lt;id=4&gt;&lt;piece index&gt;</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#bitfield:_.3Clen.3D0001.2BX.3E.3Cid.3D5.3E.3Cbitfield.3E"><SPAN 
            class=tocnumber>10.5.7</SPAN> <SPAN class=toctext>bitfield: 
            &lt;len=0001+X&gt;&lt;id=5&gt;&lt;bitfield&gt;</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#request:_.3Clen.3D0013.3E.3Cid.3D6.3E.3Cindex.3E.3Cbegin.3E.3Clength.3E"><SPAN 
            class=tocnumber>10.5.8</SPAN> <SPAN class=toctext>request: 
            &lt;len=0013&gt;&lt;id=6&gt;&lt;index&gt;&lt;begin&gt;&lt;length&gt;</SPAN></A> 

            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#piece:_.3Clen.3D0009.2BX.3E.3Cid.3D7.3E.3Cindex.3E.3Cbegin.3E.3Cblock.3E"><SPAN 
            class=tocnumber>10.5.9</SPAN> <SPAN class=toctext>piece: 
            &lt;len=0009+X&gt;&lt;id=7&gt;&lt;index&gt;&lt;begin&gt;&lt;block&gt;</SPAN></A> 

            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#cancel:_.3Clen.3D0013.3E.3Cid.3C.3D8.3E.3Cindex.3E.3Cbegin.3E.3Clength.3E"><SPAN 
            class=tocnumber>10.5.10</SPAN> <SPAN class=toctext>cancel: 
            &lt;len=0013&gt;&lt;id&lt;=8&gt;&lt;index&gt;&lt;begin&gt;&lt;length&gt;</SPAN></A> 

            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#port:_.3Clen.3D0003.3E.3Cid.3D9.3E.3Clisten-port.3E"><SPAN 
            class=tocnumber>10.5.11</SPAN> <SPAN class=toctext>port: 
            &lt;len=0003&gt;&lt;id=9&gt;&lt;listen-port&gt;</SPAN></A> 
          </LI></UL></LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Algorithms"><SPAN 
        class=tocnumber>11</SPAN> <SPAN class=toctext>Algorithms</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Queuing"><SPAN 
          class=tocnumber>11.1</SPAN> <SPAN class=toctext>Queuing</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Super_Seeding"><SPAN 
          class=tocnumber>11.2</SPAN> <SPAN class=toctext>Super 
          Seeding</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Piece_downloading_strategy"><SPAN 
          class=tocnumber>11.3</SPAN> <SPAN class=toctext>Piece downloading 
          strategy</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#End_Game"><SPAN 
          class=tocnumber>11.4</SPAN> <SPAN class=toctext>End Game</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Choking_and_Optimistic_Unchoking"><SPAN 
          class=tocnumber>11.5</SPAN> <SPAN class=toctext>Choking and Optimistic 
          Unchoking</SPAN></A> 
          <UL>
            <LI class=toclevel-3><A 
            href="http://wiki.theory.org/BitTorrentSpecification#Anti-snubbing"><SPAN 
            class=tocnumber>11.5.1</SPAN> <SPAN 
            class=toctext>Anti-snubbing</SPAN></A> </LI></UL></LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Official_Extensions_To_The_Protocol"><SPAN 
        class=tocnumber>12</SPAN> <SPAN class=toctext>Official Extensions To The 
        Protocol</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Fast_Peers_Extensions"><SPAN 
          class=tocnumber>12.1</SPAN> <SPAN class=toctext>Fast Peers 
          Extensions</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Distributed_Hash_Table"><SPAN 
          class=tocnumber>12.2</SPAN> <SPAN class=toctext>Distributed Hash 
          Table</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Connection_Encryption"><SPAN 
          class=tocnumber>12.3</SPAN> <SPAN class=toctext>Connection 
          Encryption</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Unofficial_Extensions_To_The_Protocol"><SPAN 
        class=tocnumber>13</SPAN> <SPAN class=toctext>Unofficial Extensions To 
        The Protocol</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Azureus_Messaging_Protocol"><SPAN 
          class=tocnumber>13.1</SPAN> <SPAN class=toctext>Azureus Messaging 
          Protocol</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#WebSeeding"><SPAN 
          class=tocnumber>13.2</SPAN> <SPAN class=toctext>WebSeeding</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Extension_protocol"><SPAN 
          class=tocnumber>13.3</SPAN> <SPAN class=toctext>Extension 
          protocol</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#Extension_Negotiation_Protocol"><SPAN 
          class=tocnumber>13.4</SPAN> <SPAN class=toctext>Extension Negotiation 
          Protocol</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#BitTorrent_Location-aware_Protocol_1.0"><SPAN 
          class=tocnumber>13.5</SPAN> <SPAN class=toctext>BitTorrent 
          Location-aware Protocol 1.0</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#SimpleBT_Extension_Protocol"><SPAN 
          class=tocnumber>13.6</SPAN> <SPAN class=toctext>SimpleBT Extension 
          Protocol</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.theory.org/BitTorrentSpecification#BitComet_Extension_Protocol"><SPAN 
          class=tocnumber>13.7</SPAN> <SPAN class=toctext>BitComet Extension 
          Protocol</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Reserved_Bytes"><SPAN 
        class=tocnumber>14</SPAN> <SPAN class=toctext>Reserved Bytes</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://wiki.theory.org/BitTorrentSpecification#Change_Log"><SPAN 
        class=tocnumber>15</SPAN> <SPAN class=toctext>Change Log</SPAN></A> 
      </LI></UL></TD></TR></TBODY></TABLE>
<SCRIPT type=text/javascript> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </SCRIPT>
<A name=Identification></A>
<H2><SPAN class=editsection>[<A title="Edit section: Identification" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=1">edit</A>]</SPAN> 
<SPAN class=mw-headline>Identification </SPAN></H2>
<P><A title=BitTorrent href="http://wiki.theory.org/BitTorrent">BitTorrent</A> 
is a peer-to-peer file sharing protocol designed by Bram Cohen. Visit his pages 
at <A class="external free" title=http://www.bittorrent.com 
href="http://www.bittorrent.com/" rel=nofollow>http://www.bittorrent.com/</A> 
BitTorrent is designed to facilitate file transfers among multiple peers across 
unreliable networks. </P><A name=Purpose></A>
<H2><SPAN class=editsection>[<A title="Edit section: Purpose" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=2">edit</A>]</SPAN> 
<SPAN class=mw-headline>Purpose </SPAN></H2>
<P>The purpose of this specification is to document version 1.0 of the 
BitTorrent protocol specification in detail. Bram's <A class="external text" 
title=http://www.bittorrent.org/protocol.html 
href="http://www.bittorrent.org/protocol.html" rel=nofollow>protocol 
specification page</A> outlines the protocol in somewhat general terms, and 
lacks behaviorial detail in some areas. The hope is that this document will 
become a <B>formal</B> specification, written in clear, unambiguous terms, which 
can be used as a basis for discussion and implementation in the future. </P>
<P>This document is intended to be maintained and used by the BitTorrent 
development community. Everyone is invited to contribute to this document, with 
the understanding that the content here is intended to represent the current 
protocol, which is already deployed in a number of existing client 
implementations. </P>
<P>This is not the place to suggest feature requests. For that, please go to the 
<A class="external text" 
title=http://lists.ibiblio.org/mailman/listinfo/bittorrent 
href="http://lists.ibiblio.org/mailman/listinfo/bittorrent" rel=nofollow>mailing 
list</A>. </P><A name=Scope></A>
<H2><SPAN class=editsection>[<A title="Edit section: Scope" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=3">edit</A>]</SPAN> 
<SPAN class=mw-headline>Scope </SPAN></H2>
<P>This document applies to the first version (i.e. version 1.0) of the 
BitTorrent protocol specification. Currently, this applies to the torrent file 
structure, peer wire protocol, and the Tracker HTTP/HTTPS protocol 
specifications. As newer revisions of each protocol are defined, they should be 
specified on their own separate pages, <B>not here</B>. </P><A 
name=Related_Documents></A>
<H2><SPAN class=editsection>[<A title="Edit section: Related Documents" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=4">edit</A>]</SPAN> 
<SPAN class=mw-headline>Related Documents </SPAN></H2>
<UL>
  <LI><A class="external free" title=http://www.bittorrent.org/protocol.html 
  href="http://www.bittorrent.org/protocol.html" 
  rel=nofollow>http://www.bittorrent.org/protocol.html</A> - The official 
  protocol specification. 
  <LI><A title=BitTorrentWishList 
  href="http://wiki.theory.org/BitTorrentWishList">BitTorrentWishList</A> - A 
  wish list for developers and end users alike. 
  <LI><A title=BitTorrentTrackerExtensions 
  href="http://wiki.theory.org/BitTorrentTrackerExtensions">BitTorrentTrackerExtensions</A> 
  - Describes the various extensions of the Tracker protocol that are in use. 
  </LI></UL><A name=Conventions></A>
<H2><SPAN class=editsection>[<A title="Edit section: Conventions" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=5">edit</A>]</SPAN> 
<SPAN class=mw-headline>Conventions </SPAN></H2>
<P>In this document, a number of conventions are used in an attempt to present 
information in a concise and unambiguous fashion. </P>
<UL>
  <LI><I>peer</I> v/s <I>client</I>: In this document, a <I>peer</I> is any 
  BitTorrent client participating in a download. The <I>client</I> is also a 
  peer, however it is the BitTorrent client that is running on the local 
  machine. Readers of this specification may choose to think of themselves as 
  the <I>client</I> which connects to numerous <I>peers</I>. 
  <LI><I>piece</I> v/s <I>block</I>: In this document, a <I>piece</I> refers to 
  a portion of the downloaded data that is described in the metainfo file, which 
  can be verified by a SHA1 hash. A <I>block</I> is a portion of data that a 
  <I>client</I> may request from a <I>peer</I>. Two or more <I>blocks</I> make 
  up a whole <I>piece</I>, which may then be verified. 
  <LI><I>defacto standard</I>: Large blocks of text in <I>italics</I> indicates 
  a practice so common in various client implementations of BitTorrent that it 
  is considered a defacto standard. </LI></UL>
<P>In order to help others find recent changes that have been made to this 
document, please fill out the change log (last section). This should contain a 
brief (i.e. one-line) entry for each major change that you've made to the 
document. </P><A name=bencoding></A>
<H2><SPAN class=editsection>[<A title="Edit section: bencoding" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=6">edit</A>]</SPAN> 
<SPAN class=mw-headline>bencoding </SPAN></H2>
<P>Bencoding is a way to specify and organize data in a terse format. It 
supports the following types: byte strings, integers, lists, and dictionaries. 
</P><A name=byte_strings></A>
<H3><SPAN class=editsection>[<A title="Edit section: byte strings" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=7">edit</A>]</SPAN> 
<SPAN class=mw-headline>byte strings </SPAN></H3>
<P>Byte strings are encoded as follows: <I>&lt;string length encoded in base ten 
ASCII&gt;<B>:</B>&lt;string data&gt;</I><BR>Note that there is no constant 
beginning delimiter, and no ending delimiter. </P>
<DL>
  <DD><B>Example</B>: <I>4<B>:</B>spam</I> represents the string "spam" 
</DD></DL><A name=integers></A>
<H3><SPAN class=editsection>[<A title="Edit section: integers" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=8">edit</A>]</SPAN> 
<SPAN class=mw-headline>integers </SPAN></H3>
<P>Integers are encoded as follows: <I><B>i</B>&lt;integer encoded in base ten 
ASCII&gt;<B>e</B></I><BR>The initial <B>i</B> and trailing <B>e</B> are 
beginning and ending delimiters. You can have negative numbers such as 
<I><B>i</B>-3<B>e</B></I>. You cannot prefix the number with a zero such as 
<I><B>i</B>04<B>e</B></I>. However, <I><B>i</B>0<B>e</B></I> is valid. </P>
<DL>
  <DD><B>Example</B>: <I><B>i</B>3<B>e</B></I> represents the integer "3" 
</DD></DL>
<UL>
  <LI><I>NOTE:</I> The maximum number of bit of this integer is unspecified, but 
  to handle it as a signed 64bit integer is mandatory to handle "large files" 
  aka .torrent for more that 4Gbyte </LI></UL><A name=lists></A>
<H3><SPAN class=editsection>[<A title="Edit section: lists" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=9">edit</A>]</SPAN> 
<SPAN class=mw-headline>lists </SPAN></H3>
<P>Lists are encoded as follows: <I><B>l</B>&lt;bencoded 
values&gt;<B>e</B></I><BR>The initial <B>l</B> and trailing <B>e</B> are 
beginning and ending delimiters. Lists may contain any bencoded type, including 
integers, strings, dictionaries, and other lists. </P>
<DL>
  <DD><B>Example:</B> <I><B>l</B>4:spam4:eggs<B>e</B></I> represents the list of 
  two strings: [ "spam", "eggs" ] </DD></DL><A name=dictionaries></A>
<H3><SPAN class=editsection>[<A title="Edit section: dictionaries" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=10">edit</A>]</SPAN> 
<SPAN class=mw-headline>dictionaries </SPAN></H3>
<P>Dictionaries are encoded as follows: <I><B>d</B>&lt;bencoded 
string&gt;&lt;bencoded element&gt;<B>e</B></I> <BR>The initial <B>d</B> and 
trailing <B>e</B> are the beginning and ending delimiters. Note that the keys 
must be bencoded strings. The values may be any bencoded type, including 
integers, strings, lists, and other dictionaries. Keys must be strings and 
appear in sorted order (sorted as raw strings, not alphanumerics). The strings 
should be compared using a binary comparison, not a culture-specific "natural" 
comparison. </P>
<DL>
  <DD><B>Example</B>: <I><B>d</B>3:cow3:moo4:spam4:eggs<B>e</B></I> represents 
  the dictionary { "cow" =&gt; "moo", "spam" =&gt; "eggs" } <BR>
  <DD><B>Example</B>: <I><B>d</B>4:spaml1:a1:be<B>e</B></I> represents the 
  dictionary { "spam" =&gt; [ "a", "b" ] } <BR>
  <DD><B>Example</B>: 
  <I><B>d</B>9:publisher3:bob18:publisher.location4:home17:publisher-webpage15:www.example.com<B>e</B></I> 
  </DD></DL><A name=implementations></A>
<H3><SPAN class=editsection>[<A title="Edit section: implementations" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=11">edit</A>]</SPAN> 
<SPAN class=mw-headline>implementations </SPAN></H3>
<UL>
  <LI>Perl implementation: <A class="external free" 
  title=http://search.cpan.org/dist/Convert-Bencode/lib/Convert/Bencode.pm 
  href="http://search.cpan.org/dist/Convert-Bencode/lib/Convert/Bencode.pm" 
  rel=nofollow>http://search.cpan.org/dist/Convert-Bencode/lib/Convert/Bencode.pm</A> 

  <LI>Java implementation: <A class="external free" 
  title=http://www.koders.com/java/fid47111A56F2466C232E09AEF75A39915EC70D3536.aspx#L52 
  href="http://www.koders.com/java/fid47111A56F2466C232E09AEF75A39915EC70D3536.aspx#L52" 
  rel=nofollow>http://www.koders.com/java/fid47111A56F2466C232E09AEF75A39915EC70D3536.aspx#L52</A> 

  <LI>Python bdecode: <A title="Decoding bencoded data with python" 
  href="http://wiki.theory.org/Decoding_bencoded_data_with_python">decoding 
  bencoded data with python</A> - I've written this because bencode.py in the 
  bittorrent source directory doesn't really handle nested bencoded data found 
  in scrapes and this is on average 5-6 times faster than the perl 
  implementation --<A class=new title=User:Hackeron 
  href="http://wiki.theory.org/index.php?title=User:Hackeron&amp;action=edit">Hackeron</A> 
  08:56, 28 February 2007 (PST) </LI></UL><A name=Metainfo_File_Structure></A>
<H2><SPAN class=editsection>[<A title="Edit section: Metainfo File Structure" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=12">edit</A>]</SPAN> 
<SPAN class=mw-headline>Metainfo File Structure </SPAN></H2>
<P>All data in a metainfo file is bencoded. The specification for bencoding is 
defined above. </P>
<P>The content of a metainfo file (the file ending in ".torrent") is a bencoded 
dictionary, containing the keys listed below. All character string values are 
UTF-8 encoded. </P>
<UL>
  <LI><B>info</B>: a dictionary that describes the file(s) of the torrent. There 
  are two possible forms: one for the case of a 'single-file' torrent with no 
  directory structure, and one for the case of a 'multi-file' torrent (see below 
  for details) 
  <LI><B>announce</B>: The announce URL of the tracker (string) 
  <LI><B>announce-list</B>: (optional) this is an extention to the official 
  specification, which is also backwards compatible. This key is used to 
  implement lists of backup trackers. The full specification can be found <A 
  class="external text" title=http://home.elp.rr.com/tur/multitracker-spec.txt 
  href="http://home.elp.rr.com/tur/multitracker-spec.txt" rel=nofollow>here</A>. 

  <LI><B>creation date</B>: (optional) the creation time of the torrent, in 
  standard UNIX epoch format (integer seconds since 1-Jan-1970 00:00:00 UTC) 
  <LI><B>comment</B>: (optional) free-form textual comments of the author 
  (string) 
  <LI><B>created by</B>: (optional) name and version of the program used to 
  create the .torrent (string) </LI></UL><A name=Info_Dictionary></A>
<H3><SPAN class=editsection>[<A title="Edit section: Info Dictionary" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=13">edit</A>]</SPAN> 
<SPAN class=mw-headline>Info Dictionary</SPAN></H3>
<P>This section contains the field which are common to both mode, "single file" 
and "multiple file". </P>
<UL>
  <LI><B>piece length</B>: number of bytes in each piece (integer) 
  <LI><B>pieces</B>: string consisting of the concatenation of all 20-byte SHA1 
  hash values, one per piece (byte string) 
  <LI><B>private</B>: (optional) this field is an integer. If it is set to "1", 
  the client MUST publish its presence to get other peers ONLY via the trackers 
  explicitly described in the metainfo file. If this field is set to "0" or is 
  not present, the client may obtain peer from other means, e.g. PEX peer 
  exchange, dht. Here, "private" may be read as "no external peer source". 
  <UL>
    <LI><B>NOTE:</B> this definition is a stub, use it at your own risk, some 
    disagree with it. fell free to improve it. <A class="external free" 
    title=http://www.azureuswiki.com/index.php/Secure_Torrents 
    href="http://www.azureuswiki.com/index.php/Secure_Torrents" 
    rel=nofollow>http://www.azureuswiki.com/index.php/Secure_Torrents</A> is the 
    definition from azureus wiki 
    <LI>Additionnally it should be noted that even if this field is used in 
    practice, it is not part of the official specification. </LI></UL></LI></UL><A 
name=Info_in_Single_File_Mode></A>
<H4><SPAN class=editsection>[<A title="Edit section: Info in Single File Mode" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=14">edit</A>]</SPAN> 
<SPAN class=mw-headline>Info in Single File Mode</SPAN></H4>
<P>For the case of the <B>single-file</B> mode, the <B>info</B> dictionary 
contains the following structure: </P>
<UL>
  <LI><B>name</B>: the filename of the file. This is purely advisory. (string) 
  <LI><B>length</B>: length of the file in bytes (integer) 
  <LI><B>md5sum</B>: (optional) a 32-character hexadecimal string corresponding 
  to the MD5 sum of the file. This is not used by BitTorrent at all, but it is 
  included by some programs for greater compatibility. </LI></UL><A 
name=Info_in_Multiple_File_Mode></A>
<H4><SPAN class=editsection>[<A title="Edit section: Info in Multiple File Mode" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=15">edit</A>]</SPAN> 
<SPAN class=mw-headline>Info in Multiple File Mode</SPAN></H4>
<P>For the case of the <B>multi-file</B> mode, the <B>info</B> dictionary 
contains the following structure: </P>
<UL>
  <LI><B>name</B>: the filename of the directory in which to store all the 
  files. This is purely advisory. (string) 
  <LI><B>files</B>: a list of dictionaries, one for each file. Each dictionary 
  in this list contains the following keys: 
  <UL>
    <LI><B>length</B>: length of the file in bytes (integer) 
    <LI><B>md5sum</B>: (optional) a 32-character hexadecimal string 
    corresponding to the MD5 sum of the file. This is not used by BitTorrent at 
    all, but it is included by some programs for greater compatibility. 
    <LI><B>path</B>: a list containing one or more string elements that together 
    represent the path and filename. Each element in the list corresponds to 
    either a directory name or (in the case of the final element) the filename. 
    For example, a the file "dir1/dir2/file.ext" would consist of three string 
    elements: "dir1", "dir2", and "file.ext". This is encoded as a bencoded list 
    of strings such as 
    <I>l''</I><B>4</B>:dir1'<B>4</B><I>:dir2'<B>8</B></I>:file.ext'<B>e*</B> 
    </LI></UL></LI></UL><A name=Notes></A>
<H3><SPAN class=editsection>[<A title="Edit section: Notes" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=16">edit</A>]</SPAN> 
<SPAN class=mw-headline>Notes</SPAN></H3>
<UL>
  <LI>The <B>piece length</B> specifies the nominal piece size, and is usually a 
  power of 2. The piece size is typically chosen based on the total amount of 
  file data in the torrent, constrained by the fact that piece sizes too large 
  cause inefficiency, and too small a piece size will result in a large .torrent 
  metadata file. The conventional wisdom used to be to pick the smallest piece 
  size that results in a .torrent file no greater than approx. 50 - 75 kB 
  (presumably to ease the load on the server hosting the torrent files). 
  However, now that hosting storage and bandwidth are not tightly constrained, 
  <I>it is best to keep the piece size to 512KB or less,</I> at least for 
  torrents under 8-10GB or so, even if that results in a larger torrent file, in 
  order to have a more efficient swarm for sharing files. The most common sizes 
  are 256 kB, 512 kB, and 1 MB.<I> Every piece is of equal length except for the 
  final piece, which is irregular. The number of pieces is thus determined by 
  'ceil( total length / piece size )'. For the purposes of piece boundaries in 
  the multi-file case, consider the file data as one long continuous stream, 
  composed of the concatenation of each file in the order listed in the 
  </I>files<I> list. The number of pieces and their boundaries are then 
  determined in the same manner as the case of a single file. Pieces may overlap 
  file boundaries.</I> 
  <LI>Each piece has a corresponding SHA1 hash of the data contained within that 
  piece. These hashes are concatenated to form the <I>pieces<B> value in the 
  above </B></I><B>info</B> dictionary. Note that this is <B>not</B> a list but 
  rather a single string. The length of the string must be a multiple of 20. 
  </LI></UL><A name=Tracker_HTTP.2FHTTPS_Protocol></A>
<H2><SPAN class=editsection>[<A 
title="Edit section: Tracker HTTP/HTTPS Protocol" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=17">edit</A>]</SPAN> 
<SPAN class=mw-headline>Tracker HTTP/HTTPS Protocol </SPAN></H2>
<P>The tracker is an HTTP/HTTPS service which responds to HTTP GET requests. The 
requests include metrics from clients that help the tracker keep overall 
statistics about the torrent. The response includes a peer list that helps the 
client participate in the torrent. The base URL consists of the "announce URL" 
as defined in the metadata (.torrent) file. The parameters are then added to 
this URL, using standard CGI methods (i.e. a '?' after the announce URL, 
followed by 'param=value' sequences separated by '&amp;'). </P>
<P>Note that all binary data in the URL (particularly info_hash and peer_id) 
must be properly escaped. This means any byte not in the set 0-9, a-z, A-Z, '.', 
'-', '_' and '~', must be encoded using the "%nn" format, where nn is the 
hexadecimal value of the byte. (See RFC1738 for details.) </P>
<P>For a 20-byte hash of 
\x12\x34\x56\x78\x9a\xbc\xde\xf1\x23\x45\x67\x89\xab\xcd\xef\x12\x34\x56\x78\x9a,<BR>The 
right encoded form is %124Vx%9A%BC%DE%F1%23-g%89%AB%CD%EF%12%34Vx%9A </P><A 
name=Tracker_Request_Parameters></A>
<H3><SPAN class=editsection>[<A title="Edit section: Tracker Request Parameters" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=18">edit</A>]</SPAN> 
<SPAN class=mw-headline>Tracker Request Parameters</SPAN></H3>
<P>The parameters used in the client-&gt;tracker GET request are as follows: 
</P>
<UL>
  <LI><B>info_hash</B>: urlencoded 20-byte SHA1 hash of the <I>value</I> of the 
  <I>info</I> key from the Metainfo file. Note that the <I>value</I> will be a 
  bencoded dictionary, given the definition of the <I>info</I> key above. 
  <LI><B><A title="" 
  href="http://wiki.theory.org/BitTorrentSpecification#peer_id">peer_id</A></B>: 
  urlencoded 20-byte string used as a unique ID for the client, generated by the 
  client at startup. This is allowed to be any value, and may be binary data. 
  <I>There are currently no guidelines for generating this peer ID. However, one 
  may rightly presume that it must at least be unique for your local machine, 
  thus should probably incorporate things like process ID and perhaps a 
  timestamp recorded at startup. See <A title="" 
  href="http://wiki.theory.org/BitTorrentSpecification#peer_id">peer_id 
  </A>below for common client encodings of this field.</I> 
  <LI><B>port</B>: The port number that the client is listening on. Ports 
  reserved for BitTorrent are typically 6881-6889. Clients may choose to give up 
  if it cannot establish a port within this range. 
  <LI><B>uploaded</B>: The total amount uploaded (since the client sent the 
  'started' event to the tracker) in base ten ASCII. While not explicitly stated 
  in the official specification, the concensus is that this should be the total 
  number of bytes uploaded. 
  <LI><B>downloaded</B>: The total amount downloaded (since the client sent the 
  'started' event to the tracker) in base ten ASCII. While not explicitly stated 
  in the official specification, the consensus is that this should be the total 
  number of bytes downloaded. 
  <LI><B>left</B>: The number of bytes this client still has to download, 
  encoded in base ten ASCII. 
  <LI><B>compact</B>: Indicates the client accepts a compact response. The peers 
  list is replaced by a peers string with 6 bytes per peer. The first four bytes 
  are the host (in network byte order), the last two bytes are the port (again 
  in network byte order). It should be noted that some trackers only support 
  compact responses (for saving bandwidth) and refuse normal requests. 
  <LI><B>no_peer_id</B>: Indicates that the tracker can omit peer id field in 
  peers dictionary. This option is ignored if compact is enabled. 
  <LI><B>event</B>: If specified, must be one of <I>started</I>, 
  <I>completed</I>, <I>stopped</I>, (or empty which is the same as not being 
  specified). If not specified, then this request is one performed at regular 
  intervals. 
  <UL>
    <LI><B>started</B>: The first request to the tracker <I>must</I> include the 
    event key with this value. 
    <LI><B>stopped</B>: Must be sent to the tracker if the client is shutting 
    down gracefully. 
    <LI><B>completed</B>: Must be sent to the tracker when the download 
    completes. However, must not be sent if the download was already 100% 
    complete when the client started. Presumably, this is to allow the tracker 
    to increment the "completed downloads" metric based soley on this event. 
    </LI></UL>
  <LI><B>ip</B>: Optional. The true IP address of the client machine, in dotted 
  quad format or rfc3513 defined hexed IPv6 address. <I>Notes: In general this 
  parameter is not necessary as the address of the client can be determined from 
  the IP address from which the HTTP request came. The parameter is only needed 
  in the case where the IP address that the request came in on is not the IP 
  address of the client. This happens if the client is communicating to the 
  tracker through a proxy (or a transparent web proxy/cache.) It also is 
  necessary when both the client and the tracker are on the same local side of a 
  NAT gateway. The reason for this is that otherwise the tracker would give out 
  the internal (RFC1918) address of the client, which is not routeable. 
  Therefore the client must explicitly state its (external, routeable) IP 
  address to be given out to external peers. Various trackers treat this 
  parameter differently. Some only honor it only if the IP address that the 
  request came in on is in RFC1918 space. Others honor it unconditionally, while 
  others ignore it completely. In case of IPv6 address (e.g.: 2001:db8:1:2::100) 
  it indicates only that client can communicate via IPv6.</I> 
  <LI><B>numwant</B>: Optional. Number of peers that the client would like to 
  receive from the tracker. This value is permitted to be zero. If omitted, 
  typically defaults to 50 peers. 
  <LI><B>key</B>: Optional. An additional identification that is not shared with 
  any users. It is intended to allow a client to prove their identity should 
  their IP address change. 
  <LI><B>trackerid</B>: Optional. If a previous announce contained a tracker id, 
  it should be set here. </LI></UL><A name=Tracker_Response></A>
<H3><SPAN class=editsection>[<A title="Edit section: Tracker Response" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=19">edit</A>]</SPAN> 
<SPAN class=mw-headline>Tracker Response</SPAN></H3>
<P>The tracker responds with "text/plain" document consisting of a bencoded 
dictionary with the following keys: </P>
<UL>
  <LI><B>failure reason</B>: If present, then no other keys may be present. The 
  value is a human-readable error message as to why the request failed (string). 

  <LI><B>warning message</B>: (new, optional) Similar to failure reason, but the 
  response still gets processed normally. The warning message is shown just like 
  an error. 
  <LI><B>interval</B>: Interval in seconds that the client should wait between 
  sending regular requests to the tracker 
  <LI><B>min interval</B>: (optional) Minimum announce interval. If present 
  clients must not reannounce more frequently than this. 
  <LI><B>tracker id</B>: A string that the client should send back on its next 
  announcements. If absent and a previous announce sent a tracker id, do not 
  discard the old value; keep using it. 
  <LI><B>complete</B>: number of peers with the entire file, i.e. seeders 
  (integer) 
  <LI><B>incomplete</B>: number of non-seeder peers, aka "leechers" (integer) 
  <LI><B>peers</B>: (dictionary model) The value is a list of dictionaries, each 
  with the following keys: 
  <UL>
    <LI><B>peer id</B>: peer's self-selected ID, as described above for the 
    tracker request (string) 
    <LI><B>ip</B>: peer's IP address either IPv6 (hexed) or IPv4 (dotted quad) 
    or DNS name (string) 
    <LI><B>port</B>: peer's port number (integer) </LI></UL>
  <LI><B>peers</B>: (binary model) Instead of using the dictionary model 
  described above, the <B>peers</B> value may be a string consisting of 
  multiples of 6 bytes. First 4 bytes are the IP address and last 2 bytes are 
  the port number. All in network (big endian) notation. </LI></UL>
<P>As mentioned above, the list of peers is length 50 by default. If there are 
fewer peers in the torrent, then the list will be smaller. Otherwise, the 
tracker randomly selects peers to include in the response. <I>The tracker may 
choose to implement a more intelligent mechanism for peer selection when 
responding to a request. For instance, reporting seeds to other seeders could be 
avoided.</I> </P>
<P>Clients may send a request to the tracker more often than the specified 
interval, if an event occurs (i.e. stopped or completed) or if the client needs 
to learn about more peers. However, it is considered bad practice to "hammer" on 
a tracker to get multiple peers. If a client wants a large peer list in the 
response, then it should specify the <B>numwant</B> parameter. </P>
<P><I><B>Implementer's Note</B>: Even 30 peers is <B>plenty</B>, the official 
client version 3 in fact only actively forms new connections if it has less than 
30 peers and will refuse connections if it has 55. <B>This value is important to 
performance</B>. When a new piece has completed download, HAVE messages (see 
below) will need to be sent to most active peers. As a result the cost of 
broadcast traffic grows in direct proportion to the number of peers. Above 25, 
new peers are highly unlikely to increase download speed. UI designers are 
<B>strongly</B> advised to make this obscure and hard to change as it is very 
rare to be useful to do so.</I> </P><A name=Tracker_.27scrape.27_Convention></A>
<H2><SPAN class=editsection>[<A 
title="Edit section: Tracker 'scrape' Convention" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=20">edit</A>]</SPAN> 
<SPAN class=mw-headline>Tracker 'scrape' Convention </SPAN></H2>
<P>By convention most trackers support another form of request, which queries 
the state of a given torrent (or all torrents) that the tracker is managing. 
This is referred to as the "scrape page" because it automates the otherwise 
tedious process of "screen scraping" the tracker's stats page. </P>
<P>The scrape URL is also a HTTP GET method, similar to the one described above. 
However the base URL is different. To derive the scrape URL use the following 
steps: Begin with the announce URL. Find the last '/' in it. If the text 
immediately following that '/' isn't 'announce' it will be taken as a sign that 
that tracker doesn't support the scrape convention. If it does, substitute 
'scrape' for 'announce' to find the scrape page. </P>
<P>Examples: (announce URL -&gt; scrape URL) </P><PRE>  ~http://example.com/announce          -&gt; ~http://example.com/scrape
  ~http://example.com/x/announce        -&gt; ~http://example.com/x/scrape
  ~http://example.com/announce.php      -&gt; ~http://example.com/scrape.php
  ~http://example.com/a                 -&gt; (scrape not supported)
  ~http://example.com/announce?x2%0644 -&gt; ~http://example.com/scrape?x2%0644
  ~http://example.com/announce?x=2/4    -&gt; (scrape not supported)
  ~http://example.com/x%064announce     -&gt; (scrape not supported)
</PRE>
<P>Note especially that entity unquoting is <I>not</I> to be done. This standard 
is documented by Bram in the <A title=BitTorrent 
href="http://wiki.theory.org/BitTorrent">BitTorrent</A> development list 
archive: <A class="external free" 
title=http://groups.yahoo.com/group/BitTorrent/message/3275 
href="http://groups.yahoo.com/group/BitTorrent/message/3275" 
rel=nofollow>http://groups.yahoo.com/group/BitTorrent/message/3275</A> </P>
<P>The scrape URL may be supplemented by the optional parameter 
<I>info_hash</I>, a 20-byte value as described above. This restricts the 
tracker's report to that particular torrent. Otherwise stats for all torrents 
that the tracker is managing are returned. Software authors are strongly 
encouraged to use the <I>info_hash</I> parameter when at all possible, to reduce 
the load and bandwidth of the tracker. </P>
<P>You may also specify multiple info_hash parameters to trackers that support 
it. While this isn't part of the official specifications it has become somewhat 
a defacto standard - for example: </P><PRE> http://example.com/scrape.php?info_hash=aaaaaaaaaaaaaaaaaaaa&amp;info_hash=bbbbbbbbbbbbbbbbbbbb&amp;info_hash=cccccccccccccccccccc
</PRE>
<P>The response of this HTTP GET method is a "text/plain" or sometimes gzip 
compressed document consisting of a bencoded dictionary, containing the 
following keys: </P>
<UL>
  <LI><B>files</B>: a dictionary containing one key/value pair for each torrent 
  for which there are stats. If <I>info_hash</I> was supplied and was valid, 
  this dictionary will contain a single key/value. Each key consists of a 
  20-byte binary <I>info_hash</I>. The value of each entry is another dictionary 
  containing the following: 
  <UL>
    <LI><B>complete</B>: number of peers with the entire file, i.e. seeders 
    (integer) 
    <LI><B>downloaded</B>: total number of times the tracker has registered a 
    completion ("event=complete", i.e. a client finished downloading the 
    torrent) 
    <LI><B>incomplete</B>: number of non-seeder peers, aka "leechers" (integer) 
    <LI><B>name</B>: (optional) the torrent's internal name, as specified by the 
    "name" file in the info section of the .torrent file </LI></UL></LI></UL>
<P>Note that this response has three levels of dictionary nesting. Here's an 
example: </P>
<P><TT>d5:<I>files</I>d20:....................d8:<I>complete</I>i<B>5</B>e10:<I>downloaded</I>i<B>50</B>e10:<I>incomplete</I>i<B>10</B>eeee</TT> 
</P>
<P>Where <TT>....................</TT> is the 20 byte info_hash and there are 5 
seeders, 10 leechers, and 50 complete downloads. </P><A 
name=Unofficial_extensions_to_scrape></A>
<H3><SPAN class=editsection>[<A 
title="Edit section: Unofficial extensions to scrape" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=21">edit</A>]</SPAN> 
<SPAN class=mw-headline>Unofficial extensions to scrape </SPAN></H3>
<P>Below are the response keys are being unofficially used. Since they are 
unofficial, they are all optional. </P>
<UL>
  <LI><B>failure reason</B>: Human-readable error message as to why the request 
  failed (string). Clients known to handle this key: Azureus. 
  <LI><B>flags</B>: a dictionary containing miscellaneous flags. The value of 
  the flags key is another nested dictionary, possibly containing the following: 

  <UL>
    <LI><B>min_request_interval</B>: The value for this key is an integer 
    specifying how the minimum number of seconds for the client to wait before 
    scraping the tracker again. Trackers known to send this key: BNBT. Clients 
    known to handle this key: Azureus. </LI></UL></LI></UL><A 
name=Peer_wire_protocol_.28TCP.29></A>
<H2><SPAN class=editsection>[<A title="Edit section: Peer wire protocol (TCP)" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=22">edit</A>]</SPAN> 
<SPAN class=mw-headline>Peer wire protocol (TCP) </SPAN></H2><A 
name=Overview></A>
<H3><SPAN class=editsection>[<A title="Edit section: Overview" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=23">edit</A>]</SPAN> 
<SPAN class=mw-headline>Overview </SPAN></H3>
<P>The peer protocol facilitates the exchange of pieces as described in the 
'<I>metainfo</I> file. </P>
<P><I>Note here that the original specification also used the term "piece" when 
describing the peer protocol, but as a different term than "piece" in the 
metainfo file. For that reason, the term "block" will be used in this 
specification to describe the data that is exchanged between peers over the 
wire.</I> </P>
<P>A client must maintain state information for each connection that it has with 
a remote peer: </P>
<UL>
  <LI><B>choked</B>: Whether or not the remote peer has choked this client. When 
  a peer chokes the client, it is a notification that no requests will be 
  answered until the client is unchoked. The client should not attempt to send 
  requests for blocks, and it should consider all pending (unanswered) requests 
  to be discarded by the remote peer. 
  <LI><B>interested</B>: Whether or not the remote peer is interested in 
  something this client has to offer. This is a notification that the remote 
  peer will begin requesting blocks when the client unchokes them. </LI></UL>
<P><I>Note that this also implies that the client will also need to keep track 
of whether or not it is interested in the remote peer, and if it has the remote 
peer choked or unchoked. So, the real list looks something like this:</I> </P>
<UL>
  <LI><B>am_choking</B>: this client is choking the peer 
  <LI><B>am_interested</B>: this client is interested in the peer 
  <LI><B>peer_choking</B>: peer is choking this client 
  <LI><B>peer_interested</B>: peer is interested in this client </LI></UL>
<P>Client connections start out as "choked" and "not interested". In other 
words: </P>
<UL>
  <LI><B>am_choking</B> = 1 
  <LI><B>am_interested</B> = 0 
  <LI><B>peer_choking</B> = 1 
  <LI><B>peer_interested</B> = 0 </LI></UL>
<P>A block is downloaded by the client when the client is interested in a peer, 
and that peer is not choking the client. A block is uploaded by a client when 
the client is not choking a peer, and that peer is interested in the client. 
</P>
<P>It is important for the client to keep its peers informed as to whether or 
not it is interested in them. This state information should be kept up-to-date 
with each peer even when the client is choked. This will allow peers to know if 
the client will begin downloading when it is unchoked (and vice-versa). </P><A 
name=Data_Types></A>
<H3><SPAN class=editsection>[<A title="Edit section: Data Types" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=24">edit</A>]</SPAN> 
<SPAN class=mw-headline>Data Types </SPAN></H3>
<P>Unless specified otherwise, all integers in the peer wire protocol are 
encoded as four byte big-endian values. This includes the length prefix on all 
messages that come after the handshake. </P><A name=Message_flow></A>
<H3><SPAN class=editsection>[<A title="Edit section: Message flow" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=25">edit</A>]</SPAN> 
<SPAN class=mw-headline>Message flow </SPAN></H3>
<P>The peer wire protocol consists of an initial handshake. After that, peers 
communicate via an exchange of length-prefixed messages. The length-prefix is an 
integer as described above. </P><A name=Handshake></A>
<H3><SPAN class=editsection>[<A title="Edit section: Handshake" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=26">edit</A>]</SPAN> 
<SPAN class=mw-headline>Handshake </SPAN></H3>
<P>The handshake is a required message and must be the first message transmitted 
by the client. It is (49+len(pstr)) bytes long. </P>
<P><I>handshake: 
&lt;pstrlen&gt;&lt;pstr&gt;&lt;reserved&gt;&lt;info_hash&gt;&lt;peer_id&gt;</I> 
</P>
<UL>
  <LI><B>pstrlen</B>: string length of &lt;pstr&gt;, as a single raw byte 
  <LI><B>pstr</B>: string identifier of the protocol 
  <LI><B>reserved</B>: eight (8) reserved bytes. All current implementations use 
  all zeroes. Each bit in these bytes can be used to change the behavior of the 
  protocol. <I>An email from Bram suggests that trailing bits should be used 
  first, so that leading bits may be used to change the meaning of trailing 
  bits.</I> 
  <LI><B>info_hash</B>: 20-byte SHA1 hash of the info key in the metainfo file. 
  This is the same info_hash that is transmitted in tracker requests. 
  <LI><B>peer_id</B>: 20-byte string used as a unique ID for the client. This is 
  usually the same peer_id that is transmitted in tracker requests (but not 
  always e.g. an anonymity option in Azureus). </LI></UL>
<P>In version 1.0 of the BitTorrent protocol, pstrlen = 19, and pstr = 
"BitTorrent protocol". </P>
<P>The initiator of a connection is expected to transmit their handshake 
immediately. The recipient may wait for the initiator's handshake, if it is 
capable of serving multiple torrents simultaneously (torrents are uniquely 
identified by their info<I>hash). However, the recipient must respond as soon as 
it sees the info_hash part of the handshake. The tracker's NAT-checking feature 
does not send the peer_id field of the handshake.</I> </P>
<P>If a client receives a handshake with an info_hash that it is not currently 
serving, then the client must drop the connection. </P>
<P>If the initiator of the connection receives a handshake in which the peer_id 
does not match the expected peer<I>id, then the initiator is expected to drop 
the connection. </I>Note that the initiator presumably received the peer 
information from the tracker, which includes the peer_id that was registered by 
the peer. The peer_id from the tracker and in the handshake are expected to 
match. </P><A name=peer_id></A>
<H4><SPAN class=editsection>[<A title="Edit section: peer_id" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=27">edit</A>]</SPAN> 
<SPAN class=mw-headline>peer_id </SPAN></H4>
<P>The peer_id is exactly 20 bytes (characters) long. </P>
<P>There are mainly two conventions how to encode client and client version 
information into the peer_id, Azureus-style and Shadow's-style. </P>
<P>Azureus-style uses the following encoding: '-', two characters for client id, 
four ascii digits for version number, '-', followed by random numbers. </P>
<P>For example: '-AZ2060-'... </P>
<P>known clients that uses this encoding style are: </P>
<UL>
  <LI>'AG' - <A class="external text" title=http://aresgalaxy.sourceforge.net/ 
  href="http://aresgalaxy.sourceforge.net/" rel=nofollow>Ares</A> 
  <LI>'A~' - <A class="external text" title=http://aresgalaxy.sourceforge.net/ 
  href="http://aresgalaxy.sourceforge.net/" rel=nofollow>Ares</A> 
  <LI>'AR' - <A class="external text" title=http://dev.int64.org/arctic.html 
  href="http://dev.int64.org/arctic.html" rel=nofollow>Arctic</A> 
  <LI>'AV' - <A class="external text" title=http://www.avicora.com/ 
  href="http://www.avicora.com/" rel=nofollow>Avicora</A> 
  <LI>'AX' - <A class="external text" 
  title=http://www.analogx.com/contents/download/network/bitpump.htm 
  href="http://www.analogx.com/contents/download/network/bitpump.htm" 
  rel=nofollow>BitPump</A> 
  <LI>'AZ' - <A class="external text" title=http://azureus.sf.net 
  href="http://azureus.sf.net/" rel=nofollow>Azureus</A> 
  <LI>'BB' - <A class="external text" title=http://www.btvampire.com 
  href="http://www.btvampire.com/" rel=nofollow>BitBuddy</A> 
  <LI>'BC' - <A class="external text" title=http://www.bitcomet.com 
  href="http://www.bitcomet.com/" rel=nofollow>BitComet</A> 
  <LI>'BF' - <A class="external text" title=http://bitflu.workaround.ch/ 
  href="http://bitflu.workaround.ch/" rel=nofollow>Bitflu</A> 
  <LI>'BG' - <A class="external text" title=http://btg.berlios.de/ 
  href="http://btg.berlios.de/" rel=nofollow>BTG (uses Rasterbar libtorrent)</A> 

  <LI>'BR' - <A class="external text" title=http://www.bitrocket.org 
  href="http://www.bitrocket.org/" rel=nofollow>BitRocket</A> 
  <LI>'BS' - <A class="external text" title=http://btslave.sourceforge.net 
  href="http://btslave.sourceforge.net/" rel=nofollow>BTSlave</A> 
  <LI>'BX' - ~Bittorrent X 
  <LI>'CD' - <A class="external text" 
  title=http://www.rahul.net/dholmes/ctorrent/ 
  href="http://www.rahul.net/dholmes/ctorrent/" rel=nofollow>Enhanced 
  CTorrent</A> 
  <LI>'CT' - <A class="external text" title=http://ctorrent.sourceforge.net 
  href="http://ctorrent.sourceforge.net/" rel=nofollow>CTorrent</A> 
  <LI>'DE' - <A class="external text" title=http://www.deluge-torrent.org 
  href="http://www.deluge-torrent.org/" rel=nofollow>DelugeTorrent</A> 
  <LI>'DP' - <A class="external text" title=http://www.propagatedata.com/ 
  href="http://www.propagatedata.com/" rel=nofollow>Propagate Data Client</A> 
  <LI>'EB' - <A class="external text" title=http://dywt.com.cn/ 
  href="http://dywt.com.cn/" rel=nofollow>EBit</A> 
  <LI>'ES' - <A class="external text" title=http://electricsheep.org 
  href="http://electricsheep.org/" rel=nofollow>electric sheep</A> 
  <LI>'FT' - <A class="external text" title=http://www.foxtorrent.com 
  href="http://www.foxtorrent.com/" rel=nofollow>FoxTorrent</A> 
  <LI>'GS' - <A class="external text" 
  title=http://sourceforge.net/projects/gstorrent 
  href="http://sourceforge.net/projects/gstorrent" rel=nofollow>GSTorrent</A> 
  <LI>'HL' - <A class="external text" 
  title=http://www.binarynotions.com/halite.php 
  href="http://www.binarynotions.com/halite.php" rel=nofollow>Halite</A> 
  <LI>'HN' - <A class="external text" title=http://hydranode.com 
  href="http://hydranode.com/" rel=nofollow>Hydranode</A> 
  <LI>'KT' - <A class="external text" title=http://ktorrent.org 
  href="http://ktorrent.org/" rel=nofollow>KTorrent</A> 
  <LI>'LH' - <A class="external text" title=http://code.google.com/p/lh-abc 
  href="http://code.google.com/p/lh-abc" rel=nofollow>LH-ABC</A> 
  <LI>'LP' - <A class="external text" title=http://www.lphant.com 
  href="http://www.lphant.com/" rel=nofollow>Lphant</A> 
  <LI>'LT' - <A class="external text" title=http://libtorrent.sf.net 
  href="http://libtorrent.sf.net/" rel=nofollow>libtorrent</A> 
  <LI>'lt' - <A class="external text" title=http://libtorrent.rakshasa.no 
  href="http://libtorrent.rakshasa.no/" rel=nofollow>libTorrent</A> 
  <LI>'LW' - <A class="external text" title=http://www.limewire.org 
  href="http://www.limewire.org/" rel=nofollow>LimeWire</A> 
  <LI>'MO' - <A class="external text" title=http://monotorrent.blogspot.com/ 
  href="http://monotorrent.blogspot.com/" rel=nofollow>MonoTorrent</A> 
  <LI>'MP' - <A class="external text" title=http://www.moopolice.de 
  href="http://www.moopolice.de/" rel=nofollow>MooPolice</A> 
  <LI>'MT' - <A class="external text" title=http://www.moonlighttorrent.com 
  href="http://www.moonlighttorrent.com/" rel=nofollow>MoonlightTorrent</A> 
  <LI>'PD' - <A class="external text" title=http://www.pando.com 
  href="http://www.pando.com/" rel=nofollow>Pando</A> 
  <LI>'qB' - <A class="external text" title=http://www.qbittorrent.org 
  href="http://www.qbittorrent.org/" rel=nofollow>qBittorrent</A> 
  <LI>'QD' - <A class="external text" title=http://im.qq.com/cyclone/ 
  href="http://im.qq.com/cyclone/" rel=nofollow>QQDownload</A> 
  <LI>'QT' - Qt 4 Torrent example 
  <LI>'RT' - <A class="external text" 
  title=http://www.halogenware.com/software/retriever.html 
  href="http://www.halogenware.com/software/retriever.html" 
  rel=nofollow>Retriever</A> 
  <LI>'S~' - <A class="external text" title=http://shareaza.sourceforge.net 
  href="http://shareaza.sourceforge.net/" rel=nofollow>Shareaza alpha/beta</A> 
  <LI>'SB' - ~Swiftbit 
  <LI>'SS' - SwarmScope 
  <LI>'ST' - <A class="external text" title=http://symtorrent.aut.bme.hu/ 
  href="http://symtorrent.aut.bme.hu/" rel=nofollow>SymTorrent</A> 
  <LI>'st' - <A class="external text" title=http://sharktorrent.com 
  href="http://sharktorrent.com/" rel=nofollow>sharktorrent</A> 
  <LI>'SZ' - <A class="external text" title=http://shareaza.sourceforge.net 
  href="http://shareaza.sourceforge.net/" rel=nofollow>Shareaza</A> 
  <LI>'TN' - TorrentDotNET 
  <LI>'TR' - <A class="external text" title=http://transmission.m0k.org 
  href="http://transmission.m0k.org/" rel=nofollow>Transmission</A> 
  <LI>'TS' - <A class="external text" title=http://www.torrentstorm.com 
  href="http://www.torrentstorm.com/" rel=nofollow>Torrentstorm</A> 
  <LI>'TT' - <A class="external text" title=http://www.tuotu.com 
  href="http://www.tuotu.com/" rel=nofollow>TuoTu</A> 
  <LI>'UL' - uLeecher! 
  <LI>'UT' - <A class="external text" title=http://www.utorrent.com 
  href="http://www.utorrent.com/" rel=nofollow>µTorrent</A> 
  <LI>'WT' - <A class="external text" title=http://www.bitlet.org 
  href="http://www.bitlet.org/" rel=nofollow>BitLet</A> 
  <LI>'WY' - <A class="external text" title=http://www.wyzo.com/firetorrent/ 
  href="http://www.wyzo.com/firetorrent/" rel=nofollow>FireTorrent</A> 
  <LI>'XL' - <A class="external text" title=http://www.xunlei.com 
  href="http://www.xunlei.com/" rel=nofollow>Xunlei</A> 
  <LI>'XT' - <A class="external text" 
  title=http://www.xantorrent.pwp.blueyonder.co.uk/xantorrent.zip 
  href="http://www.xantorrent.pwp.blueyonder.co.uk/xantorrent.zip" 
  rel=nofollow>XanTorrent</A> 
  <LI>'XX' - <A class="external text" title=http://www.xtorrent.com 
  href="http://www.xtorrent.com/" rel=nofollow>Xtorrent</A> 
  <LI>'ZT' - <A class="external text" title=http://www.ziptorrent.com 
  href="http://www.ziptorrent.com/" rel=nofollow>ZipTorrent</A> </LI></UL>
<P>Clients which have been seen in the wild and need to be identified: </P>
<UL>
  <LI>'BD' (example: -BD0300-) 
  <LI>'MR' (example: -MR0001-) 
  <LI>'NP' (example: -NP0201-) 
  <LI>'wF' (example: -wF2200-) </LI></UL>
<P>Shadow's style uses the following encoding: one ascii alphanumeric for client 
identification, up to five characters for version number (padded with '-' if 
less than five), followed by three characters (commonly '---', but not always 
the case), followed by random characters. Each character in the version string 
represents a number from 0 to 63. '0'=0, ..., '9'=9, 'A'=10, ..., 'Z'=35, 
'a'=36, ..., 'z'=61, '.'=62, '-'=63. </P>
<P>A full explanation by Shad0w about the encoding style (including information 
about existing conventions on how the three characters after the version string 
are used) can be found <A class="external text" 
title=http://forums.degreez.net/viewtopic.php?t=7070 
href="http://forums.degreez.net/viewtopic.php?t=7070" rel=nofollow>here</A>. 
</P>
<P>For example: 'S58B-----'... for Shadow's 5.8.11 </P>
<P>known clients that uses this encoding style are: </P>
<UL>
  <LI>'A' - <A class="external text" title=http://pingpong-abc.sourceforge.net/ 
  href="http://pingpong-abc.sourceforge.net/" rel=nofollow>ABC</A> 
  <LI>'O' - <A class="external text" title=http://osprey.ibiblio.org/ 
  href="http://osprey.ibiblio.org/" rel=nofollow>Osprey Permaseed</A> 
  <LI>'Q' - <A class="external text" title=http://btqueue.sourceforge.net/ 
  href="http://btqueue.sourceforge.net/" rel=nofollow>BTQueue</A> 
  <LI>'R' - <A class="external text" title=http://www.tribler.org/ 
  href="http://www.tribler.org/" rel=nofollow>Tribler</A> 
  <LI>'S' - <A class="external text" title=http://bt.degreez.net/ 
  href="http://bt.degreez.net/" rel=nofollow>Shadow's client</A> 
  <LI>'T' - <A class="external text" title=http://bittornado.com 
  href="http://bittornado.com/" rel=nofollow>BitTornado</A> 
  <LI>'U' - <A class="external text" 
  title=http://aaron2003.myftp.org/upnpclient.html 
  href="http://aaron2003.myftp.org/upnpclient.html" rel=nofollow>UPnP NAT Bit 
  Torrent</A> </LI></UL>
<P>Bram's client now uses this style... 'M3-4-2--' or 'M4-20-8-'. </P>
<P><A class="external text" title=http://www.bitcomet.com/ 
href="http://www.bitcomet.com/" rel=nofollow>BitComet</A> does something 
different still. Its peer_id consists of four ASCII characters 'exbc', followed 
by two bytes x and y, followed by random characters. The version number is x in 
decimal before the decimal point and y as two decimal digits after the decimal 
point. <A class="external text" title=http://www.bitlord.com/ 
href="http://www.bitlord.com/" rel=nofollow>BitLord</A> uses the same scheme, 
but adds 'LORD' after the version bytes. An <A class="external text" 
title=http://solidox.org/bc/ href="http://solidox.org/bc/" 
rel=nofollow>unofficial patch</A> for BitComet once replaced 'exbc' with 'FUTB'. 
The encoding for BitComet Peer IDs changed to Azureus-style as of BitComet 
version 0.59. </P>
<P><A class="external text" title=http://xbtt.sourceforge.net/client/ 
href="http://xbtt.sourceforge.net/client/" rel=nofollow>XBT Client</A> has its 
own style too. Its peer_id consists of the three uppercase characters 'XBT' 
followed by three ASCII digits representing the version number. If the client is 
a debug build, the seventh byte is the lowercase character 'd', otherwise it is 
a '-'. Following that is a '-' then random digits, uppercase and lowercase 
letters. Example: 'XBT054d-' at the beginning would indicate a debug build of 
version 0.5.4. </P>
<P><A class="external text" title=http://www.opera.com/ 
href="http://www.opera.com/" rel=nofollow>Opera 8 previews and Opera 9.x 
releases</A> use the following peer_id scheme: The first two characters are 'OP' 
and the next four digits equal the build number. All following characters are 
random lowercase hexdecimal digits. </P>
<P><A class="external text" title=http://mldonkey.sourceforge.net/Main_Page 
href="http://mldonkey.sourceforge.net/Main_Page" rel=nofollow>MLdonkey</A> use 
the following peer_id scheme: the first characters are '-ML' followed by a 
dotted version then a '-' followed by randomness. e.g. '-ML2.7.2-kgjjfkd' </P>
<P><A class="external text" title=http://www.bitsonwheels.com/ 
href="http://www.bitsonwheels.com/" rel=nofollow>Bits on Wheels</A> uses the 
pattern '-BOWxxx-yyyyyyyyyyyy', where y is random (uppercase letters) and x 
depends on the version. Version 1.0.6 has xxx = A0C. </P>
<P><A class="external text" title=http://queenbee.se/ href="http://queenbee.se/" 
rel=nofollow>Queen Bee</A> uses Bram's new style: 'Q1-0-0--' or 'Q1-10-0-' 
followed by random bytes. </P>
<P><A class="external text" title=http://bittyrant.cs.washington.edu/ 
href="http://bittyrant.cs.washington.edu/" rel=nofollow>BitTyrant</A> is an 
Azureus fork and simply uses 'AZ2500BT' + random bytes as peer ID in its 1.1 
version. Note the missing dashes. </P>
<P><A class="external text" title=http://www.torrentopia.org/ 
href="http://www.torrentopia.org/" rel=nofollow>TorrenTopia</A> version 1.90 
pretends to be or is derived from Mainline 3.4.6. Its peer ID starts with 
'346------'. </P>
<P><A class="external text" title=http://www.167bt.com/intl/ 
href="http://www.167bt.com/intl/" rel=nofollow>BitSpirit</A> has several modes 
for its peer ID. In one mode it reads the ID of its peer and reconnects using 
the first eight bytes as a basis for its own ID. Its real ID appears to use 
'\0\3BS' (C notation) as the first four bytes for version 3.x and '\0\2BS' for 
version 2.x. In all modes the ID may end in 'UDP0'. </P>
<P><A class="external text" title=http://rufus.sourceforge.net/ 
href="http://rufus.sourceforge.net/" rel=nofollow>Rufus</A> uses its version as 
decimal ASCII values for the first two bytes. The third and fourth bytes are 
'RS'. What then follows is the nickname of the user and some random bytes. </P>
<P><A class="external text" title=http://g3torrent.sourceforge.net/ 
href="http://g3torrent.sourceforge.net/" rel=nofollow>G3 Torrent</A> starts its 
peer ID with '-G3' and appends up to 9 characters of the nickname of the user. 
</P>
<P><A class="external text" title=http://www.flashget.com/ 
href="http://www.flashget.com/" rel=nofollow>FlashGet</A> uses Azureus style 
with 'FG' but without the trailing '-'. Version 1.82.1002 still uses the version 
digits '0180'. </P>
<P><A class="external text" title=http://www.allpeers.com/ 
href="http://www.allpeers.com/" rel=nofollow>AllPeers</A> takes the sha1 hash of 
a user dependent string and replaces the first few characters with "AP" + 
version string + "-". </P>
<P><BR>Many clients are using all random numbers or 12 zeroes followed by random 
numbers (like older versions of <A class="external text" 
title=http://www.bittorrent.com/ href="http://www.bittorrent.com/" 
rel=nofollow>Bram's client</A>). </P><A name=Messages></A>
<H3><SPAN class=editsection>[<A title="Edit section: Messages" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=28">edit</A>]</SPAN> 
<SPAN class=mw-headline>Messages</SPAN></H3>
<P>All of the remaining messages in the protocol take the form of &lt;length 
prefix&gt;&lt;message ID&gt;&lt;payload&gt;. The length prefix is a four byte 
big-endian value. The message ID is a single decimal character. The payload is 
message dependent. </P><A name=keep-alive:_.3Clen.3D0000.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: keep-alive: &amp;lt;len=0000&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=29">edit</A>]</SPAN> 
<SPAN class=mw-headline>keep-alive: &lt;len=0000&gt;</SPAN></H4>
<P>The <B>keep-alive</B> message is a message with zero bytes, specified with 
the length prefix set to zero. There is no message ID and no payload. Peers may 
close a connection if they receive no messages (<B>keep-alive</B> or any other 
message) for a certain period of time, so a keep-alive message must be sent to 
maintain the connection <I>alive</I> if no command have been sent for a given 
amount of time. This amount of time is generally two minutes. </P><A 
name=choke:_.3Clen.3D0001.3E.3Cid.3D0.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: choke: &amp;lt;len=0001&amp;gt;&amp;lt;id=0&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=30">edit</A>]</SPAN> 
<SPAN class=mw-headline>choke: &lt;len=0001&gt;&lt;id=0&gt;</SPAN></H4>
<P>The <B>choke</B> message is fixed-length and has no payload. </P><A 
name=unchoke:_.3Clen.3D0001.3E.3Cid.3D1.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: unchoke: &amp;lt;len=0001&amp;gt;&amp;lt;id=1&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=31">edit</A>]</SPAN> 
<SPAN class=mw-headline>unchoke: &lt;len=0001&gt;&lt;id=1&gt; </SPAN></H4>
<P>The <B>unchoke</B> message is fixed-length and has no payload. </P><A 
name=interested:_.3Clen.3D0001.3E.3Cid.3D2.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: interested: &amp;lt;len=0001&amp;gt;&amp;lt;id=2&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=32">edit</A>]</SPAN> 
<SPAN class=mw-headline>interested: &lt;len=0001&gt;&lt;id=2&gt; </SPAN></H4>
<P>The <B>interested</B> message is fixed-length and has no payload. </P><A 
name=not_interested:_.3Clen.3D0001.3E.3Cid.3D3.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: not interested: &amp;lt;len=0001&amp;gt;&amp;lt;id=3&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=33">edit</A>]</SPAN> 
<SPAN class=mw-headline>not interested: &lt;len=0001&gt;&lt;id=3&gt; 
</SPAN></H4>
<P>The <B>not interested</B> message is fixed-length and has no payload. </P><A 
name=have:_.3Clen.3D0005.3E.3Cid.3D4.3E.3Cpiece_index.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: have: &amp;lt;len=0005&amp;gt;&amp;lt;id=4&amp;gt;&amp;lt;piece index&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=34">edit</A>]</SPAN> 
<SPAN class=mw-headline>have: &lt;len=0005&gt;&lt;id=4&gt;&lt;piece index&gt; 
</SPAN></H4>
<P>The <B>have</B> message is fixed length. The payload is the zero-based index 
of a piece that has just been successfully downloaded and verified via the hash. 
</P>
<P><I>Implementer's Note: That is the strict definition, in reality some games 
may be played. In particular because peers are extremely unlikely to download 
pieces that they already have, a peer may choose not to advertise having a piece 
to a peer that already has that piece. At a minimum "HAVE supression" will 
result in a 50% reduction in the number of HAVE messages, this translates to 
around a 25-35% reduction in protocol overhead. At the same time, it may be 
worthwhile to send a HAVE message to a peer that has that piece already since it 
will be useful in determining which piece is rare.</I> </P>
<P><I>A malicious peer might also choose to advertise having pieces that it 
knows the peer will never download. Due to this attempting to model peers using 
this information is a <B>bad idea</B></I>. </P><A 
name=bitfield:_.3Clen.3D0001.2BX.3E.3Cid.3D5.3E.3Cbitfield.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: bitfield: &amp;lt;len=0001+X&amp;gt;&amp;lt;id=5&amp;gt;&amp;lt;bitfield&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=35">edit</A>]</SPAN> 
<SPAN class=mw-headline>bitfield: &lt;len=0001+X&gt;&lt;id=5&gt;&lt;bitfield&gt; 
</SPAN></H4>
<P>The <B>bitfield</B> message may only be sent immediately after the 
handshaking sequence is completed, and before any other messages are sent. It is 
optional, and need not be sent if a client has no pieces. </P>
<P>The <B>bitfield</B> message is variable length, where X is the length of the 
bitfield. The payload is a bitfield representing the pieces that have been 
successfully downloaded. The high bit in the first byte corresponds to piece 
index 0. Bits that are cleared indicated a missing piece, and set bits indicate 
a valid and available piece. Spare bits at the end are set to zero. </P>
<P><I>A bitfield of the wrong length is considered an error. Clients should drop 
the connection if they receive bitfields that are not of the correct size, or if 
the bitfield has any of the spare bits set.</I> </P><A 
name=request:_.3Clen.3D0013.3E.3Cid.3D6.3E.3Cindex.3E.3Cbegin.3E.3Clength.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: request: &amp;lt;len=0013&amp;gt;&amp;lt;id=6&amp;gt;&amp;lt;index&amp;gt;&amp;lt;begin&amp;gt;&amp;lt;length&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=36">edit</A>]</SPAN> 
<SPAN class=mw-headline>request: 
&lt;len=0013&gt;&lt;id=6&gt;&lt;index&gt;&lt;begin&gt;&lt;length&gt; 
</SPAN></H4>
<P>The <B>request</B> message is fixed length, and is used to request a block. 
The payload contains the following information: </P>
<UL>
  <LI><B>index</B>: integer specifying the zero-based piece index 
  <LI><B>begin</B>: integer specifying the zero-based byte offset within the 
  piece 
  <LI><B>length</B>: integer specifying the requested length. </LI></UL>
<P><I><B>This section is under dispute! Please use the <A class="external text" 
title=http://wiki.theory.org/Talk:BitTorrentSpecification#Messages:_request 
href="http://wiki.theory.org/Talk:BitTorrentSpecification#Messages:_request" 
rel=nofollow>discussion page</A> to resolve this!</B></I> </P>
<P><I><B>View #1</B></I> According to the official specification, "All current 
implementations use 2^15 (32KB), and close connections which request an amount 
greater than 2^17 (128KB)." As early as version 3 or 2004, this behavior was 
changed to use 2^14 (16KB) blocks. As of version 4.0 or mid-2005, the mainline 
disconnected on requests larger than 2^14 (16KB); and some clients have followed 
suit. Note that block requests are smaller than pieces (&gt;=2^18 bytes), so 
multiple requests will be needed to download a whole piece. </P>
<P><I>Strictly, the specification allows 2^15 (32KB) requests. The reality is 
near all clients will now use 2^14 (16KB) requests. Due to clients that enforce 
that size, it is recommended that implementations make requests of that size. 
Due to smaller requests resulting in higher overhead due to tracking a greater 
number of requests, implementers are advised against going below 2^14 
(16KB).</I> </P>
<P><I>The choice of request block size limit enforcement is not nearly so clear 
cut. With mainline version 4 enforcing 16KB requests, most clients will use that 
size. At the same time 2^14 (16KB) is the </I>semi<I>-official (only </I>semi<I> 
because the official protocol document has not been updated) limit now, so 
enforcing that isn't wrong. At the same time, allowing larger requests enlarges 
the set of possible peers, and except on very low bandwidth connections 
(&lt;256kbps) multiple blocks will be downloaded in one choke-timeperiod, thus 
merely enforcing the old limit causes minimal performance degradation. Due to 
this factor, it is recommended that only the older 2^17 (128KB) maximum size 
limit be enforced.</I> </P>
<P><I><B>View #2</B></I> This section has contained falsehoods for a large 
portion of the time this page has existed. This is the third time I (uau) am 
correcting this same section for incorrect information being added, so I won't 
rewrite it completely since it'll probably be broken again... Current version 
has at least the following errors: Mainline started using 2^14 (16384) byte 
requests when it was still the only client in existence; only the "official 
specification" still talked about the obsolete 32768 byte value which was in 
reality neither the default size nor maximum allowed. In version 4 the request 
behavior did not change, but the maximum allowed size did change to equal the 
default size. In latest mainline versions the max has changed to 32768 (note 
that this is the first appearance of 32768 for either default or max size since 
the first ancient versions). "Most older clients use 32KB requests" is false. 
Discussion of larger requests fails to take latency effects into account. </P><A 
name=piece:_.3Clen.3D0009.2BX.3E.3Cid.3D7.3E.3Cindex.3E.3Cbegin.3E.3Cblock.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: piece: &amp;lt;len=0009+X&amp;gt;&amp;lt;id=7&amp;gt;&amp;lt;index&amp;gt;&amp;lt;begin&amp;gt;&amp;lt;block&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=37">edit</A>]</SPAN> 
<SPAN class=mw-headline>piece: 
&lt;len=0009+X&gt;&lt;id=7&gt;&lt;index&gt;&lt;begin&gt;&lt;block&gt; 
</SPAN></H4>
<P>The <B>piece</B> message is variable length, where X is the length of the 
block. The payload contains the following information: </P>
<UL>
  <LI><B>index</B>: integer specifying the zero-based piece index 
  <LI><B>begin</B>: integer specifying the zero-based byte offset within the 
  piece 
  <LI><B>block</B>: block of data, which is a subset of the piece specified by 
  index. </LI></UL><A 
name=cancel:_.3Clen.3D0013.3E.3Cid.3C.3D8.3E.3Cindex.3E.3Cbegin.3E.3Clength.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: cancel: &amp;lt;len=0013&amp;gt;&amp;lt;id&amp;lt;=8&amp;gt;&amp;lt;index&amp;gt;&amp;lt;begin&amp;gt;&amp;lt;length&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=38">edit</A>]</SPAN> 
<SPAN class=mw-headline>cancel: 
&lt;len=0013&gt;&lt;id&lt;=8&gt;&lt;index&gt;&lt;begin&gt;&lt;length&gt; 
</SPAN></H4>
<P>The <B>cancel</B> message is fixed length, and is used to cancel block 
requests. The payload is identical to that of the "request" message. It is 
typically used during "End Game" (see the Algorithms section below). </P><A 
name=port:_.3Clen.3D0003.3E.3Cid.3D9.3E.3Clisten-port.3E></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: port: &amp;lt;len=0003&amp;gt;&amp;lt;id=9&amp;gt;&amp;lt;listen-port&amp;gt;" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=39">edit</A>]</SPAN> 
<SPAN class=mw-headline>port: &lt;len=0003&gt;&lt;id=9&gt;&lt;listen-port&gt; 
</SPAN></H4>
<P>The <B>port</B> message is sent by newer versions of the Mainline that 
implements a DHT tracker. The listen port is the port this peer's DHT node is 
listening on. This peer should be inserted in the local routing table (if DHT 
tracker is supported). </P><A name=Algorithms></A>
<H2><SPAN class=editsection>[<A title="Edit section: Algorithms" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=40">edit</A>]</SPAN> 
<SPAN class=mw-headline>Algorithms </SPAN></H2><A name=Queuing></A>
<H3><SPAN class=editsection>[<A title="Edit section: Queuing" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=41">edit</A>]</SPAN> 
<SPAN class=mw-headline>Queuing </SPAN></H3>
<P><I><B>This section is under dispute! Please use the <A class="external text" 
title=http://wiki.theory.org/Talk:BitTorrentSpecification#Algorithms:_Queuing 
href="http://wiki.theory.org/Talk:BitTorrentSpecification#Algorithms:_Queuing" 
rel=nofollow>discussion page</A> to resolve this!</B></I> </P>
<P><I><B>View #1</B></I> In general peers are advised to keep a few unfullfilled 
requests on each connection. This is done because otherwise a full round trip is 
required from the download of one block to begining the download of a new block 
(round trip between PIECE message and next REQUEST message). On links with high 
BDP (bandwidth-delay-product, high latency or high bandwidth), this can result 
in a substantial performance loss. </P>
<P><I>Implementer's note: This the '</I>most crucial performance item<I>. A 
static queue of 10 requests is reasonable for 16KB blocks on a 5mbps link with 
50ms latency. Links with greater bandwidth are becoming very common so UI 
designers are urged to make this readily available for changing. Notably cable 
modems were known for traffic policing and increasing this might of aleviated 
some of the problems caused by this.</I> </P>
<P><I><B>View #2</B></I> NOTE: much of the information in this "Queuing" section 
is false or misleading. I'll just note that the "defaults to 5 outstanding 
requests" hasn't been true for a long time, "32 KB blocks" is misleading since 
you normally don't use 32 KB blocks, and tuning queue length by changing it and 
trying to measure the effects is a bad idea. </P><A name=Super_Seeding></A>
<H3><SPAN class=editsection>[<A title="Edit section: Super Seeding" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=42">edit</A>]</SPAN> 
<SPAN class=mw-headline>Super Seeding </SPAN></H3>
<P><I>(This was not part of the original specification)</I> </P>
<P><I>The super-seed feature in S-5.5 and on is a new seeding algorithm designed 
to help a torrent initiator with limited bandwidth "pump up" a large torrent, 
reducing the amount of data it needs to upload in order to spawn new seeds in 
the torrent.</I> </P>
<P><I>When a seeding client enters "super-seed mode", it will not act as a 
standard seed, but masquerades as a normal client with no data. As clients 
connect, it will then inform them that it received a piece -- a piece that was 
never sent, or if all pieces were already sent, is very rare. This will induce 
the client to attempt to download only that piece.</I> </P>
<P><I>When the client has finished downloading the piece, the seed will not 
inform it of any other pieces until it has seen the piece it had sent previously 
present on at least one other client. Until then, the client will not have 
access to any of the other pieces of the seed, and therefore will not waste the 
seed's bandwidth.</I> </P>
<P><I>This method has resulted in much higher seeding efficiencies, by both 
inducing peers into taking only the rarest data, reducing the amount of 
redundant data sent, and limiting the amount of data sent to peers which do not 
contribute to the swarm. Prior to this, a seed might have to upload 150% to 200% 
of the total size of a torrent before other clients became seeds. However, a 
large torrent seeded with a single client running in super-seed mode was able to 
do so after only uploading 105% of the data. This is 150-200% more efficient 
than when using a standard seed.</I> </P>
<P><I>Super-seed mode is '</I>NOT<I> recommended for general use. While it does 
assist in the wider distribution of rare data, because it limits the selection 
of pieces a client can downlad, it also limits the ability of those clients to 
download data for pieces they have already partially retrieved. Therefore, 
super-seed mode is only recommended for initial seeding servers.</I> </P><PRE><I>Why not rename it to e.g. "Initial Seeding Mode" or "Releaser Mode" then?</I>
</PRE><A name=Piece_downloading_strategy></A>
<H3><SPAN class=editsection>[<A title="Edit section: Piece downloading strategy" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=43">edit</A>]</SPAN> 
<SPAN class=mw-headline>Piece downloading strategy </SPAN></H3>
<P>Clients may choose to download pieces in random order. </P>
<P><I>A better strategy is to download pieces in </I><A title=Availability 
href="http://wiki.theory.org/Availability">rarest first</A><I> order. The client 
can determine this by keeping the initial bitfield from each peer, and updating 
it with every '</I>have<I> message. Then, the client can download the pieces 
that appear least frequently in these peer bitfields. Note that any Rarest First 
strategy should include randomization among at least several of the least common 
pieces, as having many clients all attempting to jump on the same "least common" 
piece would be counter productive.</I> </P><A name=End_Game></A>
<H3><SPAN class=editsection>[<A title="Edit section: End Game" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=44">edit</A>]</SPAN> 
<SPAN class=mw-headline>End Game </SPAN></H3>
<P>When a download is almost complete, there's a tendency for the last few 
blocks to trickle in slowly. To speed this up, the client sends requests for all 
of its missing blocks to all of its peers. To keep this from becoming horribly 
inefficient, the client also sends a cancel to everyone else every time a block 
arrives. </P>
<P><I>There is no documented thresholds, recommended percentages, or block 
counts that could be used as a guide or Recommended Best Practice here.</I> </P>
<P><I>When to enter end game mode is an area of discussion. Some clients enter 
end game when all pieces have been requested. Others wait until the number of 
blocks left is lower than the number of blocks in transit, and no more than 20. 
There seems to be agreement that it's a good idea to keep the number of pending 
blocks low (1 or 2 blocks) to minimize the overhead, and if you randomize the 
blocks requested, there's a lower chance of downloading duplicates. More on the 
protocol overhead can be found here:</I> <A class="external free" 
title=http://hal.inria.fr/inria-00000156/en 
href="http://hal.inria.fr/inria-00000156/en" 
rel=nofollow>http://hal.inria.fr/inria-00000156/en</A> </P><A 
name=Choking_and_Optimistic_Unchoking></A>
<H3><SPAN class=editsection>[<A 
title="Edit section: Choking and Optimistic Unchoking" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=45">edit</A>]</SPAN> 
<SPAN class=mw-headline>Choking and Optimistic Unchoking </SPAN></H3>
<P>Choking is done for several reasons. TCP congestion control behaves very 
poorly when sending over many connections at once. Also, choking lets each peer 
use a tit-for-tat-ish algorithm to ensure that they get a consistent download 
rate. </P>
<P>The choking algorithm described below is the currently deployed one. It is 
very important that all new algorithms work well both in a network consisting 
entirely of themselves and in a network consisting mostly of this one. </P>
<P>There are several criteria a good choking algorithm should meet. It should 
cap the number of simultaneous uploads for good TCP performance. It should avoid 
choking and unchoking quickly, known as 'fibrillation'. It should reciprocate to 
peers who let it download. Finally, it should try out unused connections once in 
a while to find out if they might be better than the currently used ones, known 
as optimistic unchoking. </P>
<P>The currently deployed choking algorithm avoids fibrillation by only changing 
choked peers once every ten seconds. </P>
<P>Reciprocation and number of uploads capping is managed by unchoking the four 
peers which have the best upload rate and are interested. This maximizes the 
client's download rate. These four peers are referred to as <I>downloaders</I>, 
because they are interested in downloading from the client. </P>
<P>Peers which have a better upload rate (as compared to the <I>downloaders</I>) 
but aren't interested get unchoked. If they become interested, the 
<I>downloader</I> with the worst upload rate gets choked. If a client has a 
complete file, it uses its upload rate rather than its download rate to decide 
which peers to unchoke. </P>
<P>For optimistic unchoking, at any one time there is a single peer which is 
unchoked regardless of its upload rate (if interested, it counts as one of the 
four allowed <I>downloaders</I>). Which peer is optimistically unchoked rotates 
every 30 seconds. Newly connected peers are three times as likely to start as 
the current optimistic unchoke as anywhere else in the rotation. This gives them 
a decent chance of getting a complete piece to upload. </P><A 
name=Anti-snubbing></A>
<H4><SPAN class=editsection>[<A title="Edit section: Anti-snubbing" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=46">edit</A>]</SPAN> 
<SPAN class=mw-headline>Anti-snubbing </SPAN></H4>
<P>Occasionally a <A title=BitTorrent 
href="http://wiki.theory.org/BitTorrent">BitTorrent</A> peer will be choked by 
all peers which it was formerly downloading from. In such cases it will usually 
continue to get poor download rates until the optimistic unchoke finds better 
peers. To mitigate this problem, when over a minute goes by without getting any 
piece data while downloading from a peer, <A title=BitTorrent 
href="http://wiki.theory.org/BitTorrent">BitTorrent</A> assumes it is "snubbed" 
by that peer and doesn't upload to it except as an optimistic unchoke. This 
frequently results in more than one concurrent optimistic unchoke, (an exception 
to the exactly one optimistic unchoke rule mentioned above), which causes 
download rates to recover much more quickly when they falter. </P><A 
name=Official_Extensions_To_The_Protocol></A>
<H2><SPAN class=editsection>[<A 
title="Edit section: Official Extensions To The Protocol" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=47">edit</A>]</SPAN> 
<SPAN class=mw-headline>Official Extensions To The Protocol </SPAN></H2>
<P>Currently there are a few official extensions to the protocol. </P><A 
name=Fast_Peers_Extensions></A>
<H4><SPAN class=editsection>[<A title="Edit section: Fast Peers Extensions" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=48">edit</A>]</SPAN> 
<SPAN class=mw-headline>Fast Peers Extensions </SPAN></H4>
<UL>
  <LI>Reserved Bit: The third least significant bit in the 8th reserved byte 
  i.e. reserved[7] |= 0x04 </LI></UL>
<P>These extensions serve multiple purposes. They allow a peer to more quickly 
bootstrap into a swarm by giving a peer a specific set of pieces which they will 
be allowed download regardless of choked status. They reduce message overhead by 
adding HaveAll and HaveNone messages and allow explicit rejection of piece 
requests whereas previously only implicit rejection was possible meaning that a 
peer might be left waiting for a piece that would never be delivered. </P>
<P>The specificication is documented at the <A title=BitTorrent 
href="http://wiki.theory.org/BitTorrent">BitTorrent</A> site here: <A 
class="external free" title=http://www.bittorrent.org/fast_extensions.html 
href="http://www.bittorrent.org/fast_extensions.html" 
rel=nofollow>http://www.bittorrent.org/fast_extensions.html</A> </P>
<P><BR></P><A name=Distributed_Hash_Table></A>
<H4><SPAN class=editsection>[<A title="Edit section: Distributed Hash Table" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=49">edit</A>]</SPAN> 
<SPAN class=mw-headline>Distributed Hash Table </SPAN></H4>
<UL>
  <LI>Reserved Bit: The last bit in the 8th reserved byte i.e. reserved[7] |= 
  0x01 </LI></UL>
<P>This extension is to allow for the tracking of peers downloading torrents 
without the use of a standard tracker. A peer implementing this protocol becomes 
a "tracker" and stores lists of other nodes/peers which can be used to locate 
new peers. </P>
<P>The specification is documented at the <A title=BitTorrent 
href="http://wiki.theory.org/BitTorrent">BitTorrent</A> site here: <A 
class="external free" title=http://www.bittorrent.org/Draft_DHT_protocol.html 
href="http://www.bittorrent.org/Draft_DHT_protocol.html" 
rel=nofollow>http://www.bittorrent.org/Draft_DHT_protocol.html</A> </P><A 
name=Connection_Encryption></A>
<H4><SPAN class=editsection>[<A title="Edit section: Connection Encryption" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=50">edit</A>]</SPAN> 
<SPAN class=mw-headline>Connection Encryption </SPAN></H4>
<P>This extension allows the creation of encrypted connections between peers. 
This can be used to bypass ISPs throttling BitTorrent traffic. </P>
<P>The specification is documented at <A class="external free" 
title=http://www.azureuswiki.com/index.php/Message_Stream_Encryption 
href="http://www.azureuswiki.com/index.php/Message_Stream_Encryption" 
rel=nofollow>http://www.azureuswiki.com/index.php/Message_Stream_Encryption</A> 
</P>
<P><I>The documentation is fairly complete, but ideally it would be clarified on 
several points including guidance on when encrypted connections should be 
attempted, fallback procedures to regular connections etc. </I></P><A 
name=Unofficial_Extensions_To_The_Protocol></A>
<H2><SPAN class=editsection>[<A 
title="Edit section: Unofficial Extensions To The Protocol" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=51">edit</A>]</SPAN> 
<SPAN class=mw-headline>Unofficial Extensions To The Protocol </SPAN></H2><A 
name=Azureus_Messaging_Protocol></A>
<H4><SPAN class=editsection>[<A title="Edit section: Azureus Messaging Protocol" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=52">edit</A>]</SPAN> 
<SPAN class=mw-headline>Azureus Messaging Protocol </SPAN></H4>
<UL>
  <LI>Reserved Bit: 1 </LI></UL>
<P>A protocol in its own right - if two clients indicate they support the 
protocol, then they should switch over to using it. It allows normal BitTorrent 
as well extension messages to be sent over it, and is documented <A 
class="external text" 
title=http://www.azureuswiki.com/index.php/Azureus_messaging_protocol 
href="http://www.azureuswiki.com/index.php/Azureus_messaging_protocol" 
rel=nofollow>here</A>. Currently implemented by Azureus and Transmission. </P>
<P>It is not possible to use both this protocol and the LibTorrent extension 
protocol at the same time - if both clients indicate they support both, then 
they should follow the semantics defined by the <A class="external text" 
title=http://www.azureuswiki.com/index.php/Extension_negotiation_protocol 
href="http://www.azureuswiki.com/index.php/Extension_negotiation_protocol" 
rel=nofollow>Extension Negotiation Protocol</A>. </P><A name=WebSeeding></A>
<H4><SPAN class=editsection>[<A title="Edit section: WebSeeding" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=53">edit</A>]</SPAN> 
<SPAN class=mw-headline>WebSeeding </SPAN></H4>
<P>The possibility to seed a torrent via a web server is generally called 
WebSeeding. It allows the HTTP server to work as a peer in the BitTorrent 
network. </P>
<P>There are at least two specification for how to combine a torrent download 
with a HTTP download. The first standard, implemented by BitTornado is quite 
easy to implement in the client, but is intrusive on the HTTP in that it 
requires a script handling requests on the server side. i.e. A plain HTTP server 
that just serves plain files isn't enough. The benfits is that the script can be 
more abuse resistant. This specification is found here: <A class="external free" 
title=http://bittornado.com/docs/webseed-spec.txt 
href="http://bittornado.com/docs/webseed-spec.txt" 
rel=nofollow>http://bittornado.com/docs/webseed-spec.txt</A> </P>
<P>The second specification requires slightly more from the client, but 
downloads from plain HTTP servers. It is specified here: <A 
class="external free" title=http://www.getright.com/seedtorrent.html 
href="http://www.getright.com/seedtorrent.html" 
rel=nofollow>http://www.getright.com/seedtorrent.html</A>. It has been 
implemented by GetRight, libtorrent and Mainline. </P><A 
name=Extension_protocol></A>
<H4><SPAN class=editsection>[<A title="Edit section: Extension protocol" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=54">edit</A>]</SPAN> 
<SPAN class=mw-headline>Extension protocol </SPAN></H4>
<UL>
  <LI>Reserved Bit: 44, the fourth most significant bit in the 6th reserved byte 
  i.e. reserved[5] |= 0x10 </LI></UL>
<P>This is a protocol for exchanging extension information and was derived from 
an early version of azureus' extension protocol. It adds one message for 
exchanging arbitrary handshake information including defined extension messages, 
mapping extensions to specific message IDs. It is documented here: <A 
class="external free" title=http://www.libtorrent.org/extension_protocol.html 
href="http://www.libtorrent.org/extension_protocol.html" 
rel=nofollow>http://www.libtorrent.org/extension_protocol.html</A> and is 
implemented by libtorrent, uTorrent and Mainline. </P>
<P>It is not possible to use both this protocol and the Azureus Messaging 
Protocol at the same time - if both clients indicate they support both, then 
they should follow the semantics defined by the <A class="external text" 
title=http://www.azureuswiki.com/index.php/Extension_negotiation_protocol 
href="http://www.azureuswiki.com/index.php/Extension_negotiation_protocol" 
rel=nofollow>Extension Negotiation Protocol</A>. </P><A 
name=Extension_Negotiation_Protocol></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: Extension Negotiation Protocol" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=55">edit</A>]</SPAN> 
<SPAN class=mw-headline>Extension Negotiation Protocol </SPAN></H4>
<UL>
  <LI>Reserved bits: 47 and 48 </LI></UL>
<P>These bits are used to allow two clients that support both the Azureus 
Messaging Protocol and LibTorrent's extension protocol to decide which of the 
two extensions should be used for communication, and is defined <A 
class="external text" 
title=http://www.azureuswiki.com/index.php/Extension_negotiation_protocol 
href="http://www.azureuswiki.com/index.php/Extension_negotiation_protocol" 
rel=nofollow>here</A>. </P><A name=BitTorrent_Location-aware_Protocol_1.0></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: BitTorrent Location-aware Protocol 1.0" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=56">edit</A>]</SPAN> 
<SPAN class=mw-headline>BitTorrent Location-aware Protocol 1.0 </SPAN></H4>
<UL>
  <LI>Reserved Bit: 21 </LI></UL>
<P>A Protocol, considering peers location (in geographical terms) for better 
performance. Specification can be found <A class="external text" 
title=http://wiki.theory.org/BitTorrent_Location-aware_Protocol_1.0_Specification 
href="http://wiki.theory.org/BitTorrent_Location-aware_Protocol_1.0_Specification" 
rel=nofollow>here</A>. </P><A name=SimpleBT_Extension_Protocol></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: SimpleBT Extension Protocol" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=57">edit</A>]</SPAN> 
<SPAN class=mw-headline>SimpleBT Extension Protocol </SPAN></H4>
<UL>
  <LI>Reserved Bits: fist reserved byte = 0x01, following bytes may need to be 
  set to zero </LI></UL>
<P>An extension using message id 9 to add peer exchange and connection 
statistics exchange. The specification can be found <A class="external text" 
title=http://web.archive.org/web/20031002201124/btfans.3322.org/simplebt/ProtocalExtension.txt 
href="http://web.archive.org/web/20031002201124/btfans.3322.org/simplebt/ProtocalExtension.txt" 
rel=nofollow>here</A>. The extension was in use in SimpleBT 0.32 to 0.36.1. 
Later versions of SimpleBT were called BitComet and used the similar but 
incompatible BitComet Extension Protocol. </P><A 
name=BitComet_Extension_Protocol></A>
<H4><SPAN class=editsection>[<A 
title="Edit section: BitComet Extension Protocol" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=58">edit</A>]</SPAN> 
<SPAN class=mw-headline>BitComet Extension Protocol </SPAN></H4>
<UL>
  <LI>Reserved Bits: first two reserved bytes = "ex" </LI></UL>
<P>There appears to be no official documentation. </P>
<P>In this protocol a peer announces the supported extensions by sending a 
message &lt;len=0001+X&gt;&lt;id=0xA0&gt;&lt;extension 1&gt;...&lt;extension 
X&gt; where &lt;extension n&gt; is (usually) the message id of the supported 
extension. When an extension consists of multiple messages, all ids need to be 
mentioned. </P>
<P>Extensions currently in use (TODO: reverse engineer semantics): </P>
<UL>
  <LI>0xA0 (EXT_SUPPORT) see above, needs to be included in its parameter list 
  <LI>0xA1 (EXT_PEERREQ) ask for peer exchange, used in conjunction with 
  EXT_PEERS 
  <LI>0xA2 (EXT_PEERS) in reply to EXT_PEERREQ and for updates afterwards 
  <LI>0xA3 (EXT_AUTH_SEED) appeared in BitComet 0.53, used in conjunction with 
  EXT_AUTH_CRYPTOED 
  <LI>0xA4 (EXT_AUTH_CRYPTOED) 
  <LI>0xA5 (EXT_CONNGRANT) appeared in BitComet 0.48, used in conjunction with 
  EXT_CONNACCEPT 
  <LI>0xA6 (EXT_CONNACCEPT) 
  <LI>0x06 (?) announced by BitSpirit instead of EXT_CONNACCEPT 
  <LI>0xA7 (EXT_CHAT_MESSAGE) appeared in BitComet 0.53, vanished in 0.71 
  <LI>0xA9 (EXT_HASH_REQ) appeared in BitComet 0.54, vanished in 0.71, used in 
  conjunction with EXT_HASH 
  <LI>0xAA (EXT_HASH) 
  <LI>0xAB (EXT_REPORT_RATE_old) appeared in BitComet 0.54, was replaced by 
  EXT_REPORT_RATE_new in 0.57 
  <LI>0xAC (EXT_REPORT_INFO) appeared in BitComet 0.54, vanished in 0.71, 
  reappeared in 0.82 
  <LI>0xAD (EXT_REPORT_RATE_new) appeared in BitComet 0.57, vanished in 0.75, 
  reappeared in 0.82 
  <LI>0xAE (EXT_BC_PASSPORT) appeared in BitComet 0.75 
  <LI>0xAF (EXT_DHE_PREFERRED) appeared in BitComet 0.75 
  <LI>0xB0 (?) appeared in BitComet 0.86 
  <LI>0xC0 (?) does not correspond to a message id, appeared in BitComet 0.49 
  </LI></UL>
<P>A minimum implementation needs only accept EXT_SUPPORT, but EXT_PEERREQ and 
EXT_PEERS are supported by all known implementations. </P><A 
name=Reserved_Bytes></A>
<H2><SPAN class=editsection>[<A title="Edit section: Reserved Bytes" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=59">edit</A>]</SPAN> 
<SPAN class=mw-headline>Reserved Bytes </SPAN></H2>
<P><I>The reserved bits are numbered 1-64 in the following table for ease of 
identification. Bit 1 corresponds to the most significant bit of the first 
reserved byte. Bit 8 corresponds to the least significant bit of the first 
reserved byte (i.e. byte[0] |= 0x01). Bit 64 is the least significant bit of the 
last reserved byte i.e. byte[7] |= 0x01</I> </P>
<P><I>An orange bit is a known unofficial extension, a red bit is an unknown 
unofficial extension.</I> </P>
<TABLE border=1>
  <CAPTION>Reserved Bits </CAPTION>
  <TBODY>
  <TR>
    <TH>Bit </TH>
    <TH>Use </TH>
    <TH>Azureus </TH>
    <TH>BitComet </TH>
    <TH>MainLine </TH>
    <TH>MonoTorrent </TH>
    <TH>µTorrent </TH>
    <TH>libtorrent </TH>
    <TH>KTorrent </TH>
    <TH>BitLord </TH>
    <TH>XBT </TH>
    <TH>Transmission </TH></TR>
  <TR style="BACKGROUND: orange">
    <TD>1 </TD>
    <TD>Azureus Extended Messaging </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD></TR>
  <TR style="BACKGROUND: orange">
    <TD>1-16 </TD>
    <TD>BitComet Extension protocol </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD></TR>
  <TR style="BACKGROUND: orange">
    <TD>21 </TD>
    <TD>BitTorrent Location-aware Protocol 1.0 </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD></TR>
  <TR style="BACKGROUND: orange">
    <TD>44 </TD>
    <TD>Extension protocol </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD></TR>
  <TR style="BACKGROUND: orange">
    <TD>47 - 48 </TD>
    <TD>Extension Negotiation Protocol </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD></TR>
  <TR style="BACKGROUND: orange">
    <TD>61 </TD>
    <TD>NAT Traversal </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD></TR>
  <TR>
    <TD>62 </TD>
    <TD>Fast Peers </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD></TR>
  <TR style="BACKGROUND: orange">
    <TD>63 </TD>
    <TD>XBT Peer Exchange </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD></TR>
  <TR>
    <TD>64 </TD>
    <TD>DHT </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD></TR>
  <TR style="BACKGROUND: orange">
    <TD>64 </TD>
    <TD>XBT Metadata Exchange </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">No </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD>
    <TD style="BACKGROUND: #88ff88; TEXT-ALIGN: center">Yes </TD>
    <TD style="TEXT-ALIGN: center">&nbsp;? </TD></TR></TBODY></TABLE><A 
name=Change_Log></A>
<H2><SPAN class=editsection>[<A title="Edit section: Change Log" 
href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit&amp;section=60">edit</A>]</SPAN> 
<SPAN class=mw-headline>Change Log </SPAN></H2>
<P>Put your changes below this line, so that the most recent changes appear 
first. The change log should be purged from time to time. Please preserve the 
last month's worth of change logs. </P>
<P>amc1 - 2007-09-12 - Azureus now supports the LibTorrent Extension Protocol 
(LTEP, as I refer to it). </P>
<P>amc1 - 2007-08-16 - Added description and links to Extension Negotiation 
Protocol, and formatted the reserved bits table a bit. </P>
<P>Denial - 2007-08-13 - Added description of the SimpleBT and BitComet 
extension protocols </P>
<P>amc1 - 2007-07-16 - Added SymTorrent's peer ID identifier, as well as some 
other clients I've come across which need to be identified. </P>
<P>amc1 - 2007-07-14 - Corrected information about Shadow's style of peer ID - 
existing text made incorrect assumptions. </P>
<P>mitchman - 2007-07-12 - Clarified the Opera peed-id </P>
<P>roee88- 2007-06-11 - Added LH-ABC peer_id </P>
<P>Boian V Petkantchin - April 26, 2007. Listed another unoffcial extension - 
BitTorrent Location-aware Protocol 1.0. Included it in the table of reserved 
bits. </P>
<P>daniel-gl at gmx.net - Corrected reserved bit numbers - Added NAT traversal 
and XBT extensions to table </P>
<P>stuge - 2006-11-20 - Added Queen Bee peer_id </P>
<P><A title=EHeM href="http://wiki.theory.org/EHeM">EHeM</A> - 2006-10-16 - 
Update of view #1 on <I>Message: request</I> to hopefully reflect a possible 
compromise position. - Trimming of changelog. </P>
<P><A title=EHeM href="http://wiki.theory.org/EHeM">EHeM</A> - 2006-10-11 - 
Firmly marked the <I>Message: request</I> section as being under dispute - 
Firmly marked the <I>Algorithms: Queuing</I> section as being under dispute - 
Removed personal insults by uau, could we be reasonable humans and try to 
resolve disputes peacefully? Perhaps using the attached <A class="external text" 
title=http://wiki.theory.org/Talk:BitTorrentSpecification 
href="http://wiki.theory.org/Talk:BitTorrentSpecification" 
rel=nofollow>talk/discussion</A> page? </P>
<P>Joris Guisson - 2006-09-12 - Added KTorrent specific information (peer id and 
extension table) </P>
<P>Arvid - 2006-09-12 - Added Extension protocol to the unofficial extensions 
section </P>
<P>Alan - 2006-09-12 -Removed some older history. Update the reserved bytes 
section. </P>
<P>Alan - 2006-09-11 - Added section about Extensions to Protocol </P>
<P>uau - 2006-08-17 - Added warning about the misleading information in the 
Queuing and requests packet sections. </P>
<P><A class=new title=WikiWordsAreEllFourEmmThree 
href="http://wiki.theory.org/index.php?title=WikiWordsAreEllFourEmmThree&amp;action=edit">WikiWordsAreEllFourEmmThree</A> 
- 2006-07-08 - Added <A class=new title=BitPump 
href="http://wiki.theory.org/index.php?title=BitPump&amp;action=edit">BitPump</A> 
peer_id </P>
<P>daniel-gl at gmx.net - 2006-04-28 - Added Bits on Wheels &amp; <A class=new 
title=BitLord 
href="http://wiki.theory.org/index.php?title=BitLord&amp;action=edit">BitLord</A> 
peer_id. </P>
<P><A class=new title=DennisHolmes 
href="http://wiki.theory.org/index.php?title=DennisHolmes&amp;action=edit">DennisHolmes</A> 
- 2006-04-22 - Added Enhanced CTorrent peer_id </P>
<P><A class=new title=WikiWordsAre 
href="http://wiki.theory.org/index.php?title=WikiWordsAre&amp;action=edit">WikiWordsAre</A>�berGay 
- 2006-04-16 - Anti-snubbing '<I>is</I> part of the official protocol. Check out 
the paper on <A title=BitTorrent 
href="http://wiki.theory.org/BitTorrent">BitTorrent</A> economics at <A 
class="external free" title=http://www.bittorrent.org 
href="http://www.bittorrent.org/" rel=nofollow>http://www.bittorrent.org/</A> 
</P>
<P><A class=new title=JoshElsasser 
href="http://wiki.theory.org/index.php?title=JoshElsasser&amp;action=edit">JoshElsasser</A> 
- 2006-04-11 - Added Transmission peer_id </P>
<P>daniel-gl at gmx.net - 2006-03-23 - Added Tribler peer_id </P>
<P><A class=new title=MaSiniavine 
href="http://wiki.theory.org/index.php?title=MaSiniavine&amp;action=edit">MaSiniavine</A> 
- Corrected dictionary example </P>
<P>Juanjo 2006-03-10 - Added Lphant peer ID </P>
<P><A title=EHeM href="http://wiki.theory.org/EHeM">EHeM</A> 2006-03-07 - Added 
mention of another parameter to the baseline for queuing. - Another link 
adjustment. - Added exposition on request block size. - Sample link changes, the 
domain "example.com" is explicitly reserved for examples, as such that should be 
used instead of spam.com. - Added qualification to recommended number of peers. 
</P>
<P><A title=EHeM href="http://wiki.theory.org/EHeM">EHeM</A> 2006-03-01 (minor) 
- Link changes, the official <A title=BitTorrent 
href="http://wiki.theory.org/BitTorrent">BitTorrent</A> pages are no longer on 
bitconjurer.org, but bittorent.com. - Removed unneeded line breaks from 
paragraph. - Typo fixes in changelog (yeah, I suppose do have a bit of vanity) 
</P>
<P><A title=EHeM href="http://wiki.theory.org/EHeM">EHeM</A> 2006-03-01 - 
Restored the section on queueing, as it '<I>is</I> a highly crucial performance 
item. Feel free to rewrite me if you desire, uau. The developer's list, <A 
class="external free" title=http://lists.ibiblio.org/mailman/listinfo/bittorrent 
href="http://lists.ibiblio.org/mailman/listinfo/bittorrent" 
rel=nofollow>http://lists.ibiblio.org/mailman/listinfo/bittorrent</A> is a 
better place for debates. - Trimmed changelog entries older than one year, the 
above specifies one month, but this is changing slowly so more history seems 
pertinent. </P>
<P>haylegend - 2006-01-08 - Added Retriever's peer id. </P>
<P>uau - 2005-12-13 - Fixed sizes in request message description AGAIN. They had 
been changed to incorrect values. - Removed "Queuing" section. It had so many 
errors and inaccuracies that it did more harm than good as it was, and I didn't 
feel like rewriting it. </P>
<HR>
<PRE>Last edit: Tue, 12 Sep 2006 22:38:05 -0700
(TresNi)
Revisions: 158
</PRE><!-- 
Pre-expand include size: 3811 bytes
Post-expand include size: 3811 bytes
Template argument size: 0 bytes
Maximum: 2097152 bytes
--><!-- Saved in parser cache with key mw_theoryorg:pcache:idhash:1427-0!1!0!!en!2 and timestamp 20071119090613 -->
<DIV class=printfooter>Retrieved from "<A 
href="http://wiki.theory.org/BitTorrentSpecification">http://wiki.theory.org/BitTorrentSpecification</A>"</DIV>
<DIV id=catlinks>
<P class=catlinks><A title=Special:Categories 
href="http://wiki.theory.org/Special:Categories">Category</A>: <SPAN dir=ltr><A 
class=new title=Category:PhpWiki 
href="http://wiki.theory.org/index.php?title=Category:PhpWiki&amp;action=edit">PhpWiki</A></SPAN></P></DIV><!-- end content -->
<DIV class=visualClear></DIV></DIV></DIV></DIV>
<DIV id=column-one>
<DIV class=portlet id=p-cactions>
<H5>Views</H5>
<DIV class=pBody>
<UL>
  <LI class=selected id=ca-nstab-main><A title="View the content page [c]" 
  accessKey=c href="http://wiki.theory.org/BitTorrentSpecification">Article</A> 
  <LI id=ca-talk><A title="Discussion about the content page [t]" accessKey=t 
  href="http://wiki.theory.org/Talk:BitTorrentSpecification">Discussion</A> 
  <LI id=ca-edit><A 
  title="You can edit this page. Please use the preview button before saving. [e]" 
  accessKey=e 
  href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=edit">Edit</A> 

  <LI id=ca-history><A title="Past versions of this page. [h]" accessKey=h 
  href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;action=history">History</A> 
  </LI></UL></DIV></DIV>
<DIV class=portlet id=p-personal>
<H5>Personal tools</H5>
<DIV class=pBody>
<UL>
  <LI id=pt-login><A 
  title="You are encouraged to log in, it is not mandatory however. [o]" 
  accessKey=o 
  href="http://wiki.theory.org/index.php?title=Special:Userlogin&amp;returnto=BitTorrentSpecification">Log 
  in / create account</A> </LI></UL></DIV></DIV>
<DIV class=portlet id=p-logo><A title="Visit the Main Page [z]" 
style="BACKGROUND-IMAGE: url(/skins/theoryorg.png)" accessKey=z 
href="http://wiki.theory.org/Main_Page"></A></DIV>
<SCRIPT type=text/javascript> if (window.isMSIE55) fixalpha(); </SCRIPT>

<DIV class=portlet id=p-navigation>
<H5>Navigation</H5>
<DIV class=pBody>
<UL>
  <LI id=n-mainpage><A title="Visit the Main Page [z]" accessKey=z 
  href="http://wiki.theory.org/Main_Page">Main Page</A> 
  <LI id=n-portal><A 
  title="About the project, what you can do, where to find things" 
  href="http://wiki.theory.org/TheoryOrg:Community_Portal">Community portal</A> 
  <LI id=n-currentevents><A 
  title="Find background information on current events" 
  href="http://wiki.theory.org/Current_events">Current events</A> 
  <LI id=n-recentchanges><A title="The list of recent changes in the wiki. [r]" 
  accessKey=r href="http://wiki.theory.org/Special:Recentchanges">Recent 
  changes</A> 
  <LI id=n-randompage><A title="Load a random page [x]" accessKey=x 
  href="http://wiki.theory.org/Special:Random">Random page</A> 
  <LI id=n-help><A title="The place to find out." 
  href="http://wiki.theory.org/Help:Contents">Help</A> 
  <LI id=n-sitesupport><A title="Support us" 
  href="http://wiki.theory.org/TheoryOrg:Site_support">Donations</A> 
</LI></UL></DIV></DIV>
<DIV class=portlet id=p-search>
<H5><LABEL for=searchInput>Search</LABEL></H5>
<DIV class=pBody id=searchBody>
<FORM id=searchform action=/Special:Search>
<DIV><INPUT id=searchInput title="Search TheoryOrg [f]" accessKey=f name=search> 
<INPUT class=searchButton id=searchGoButton type=submit value=Go name=go>&nbsp; <INPUT class=searchButton id=mw-searchButton type=submit value=Search name=fulltext> 
</DIV></FORM></DIV></DIV>
<DIV class=portlet id=p-tb>
<H5>Toolbox</H5>
<DIV class=pBody>
<UL>
  <LI id=t-whatlinkshere><A title="List of all wiki pages that link here [j]" 
  accessKey=j 
  href="http://wiki.theory.org/Special:Whatlinkshere/BitTorrentSpecification">What 
  links here</A> 
  <LI id=t-recentchangeslinked><A 
  title="Recent changes in pages linked from this page [k]" accessKey=k 
  href="http://wiki.theory.org/Special:Recentchangeslinked/BitTorrentSpecification">Related 
  changes</A> 
  <LI id=t-specialpages><A title="List of all special pages [q]" accessKey=q 
  href="http://wiki.theory.org/Special:Specialpages">Special pages</A> 
  <LI id=t-print><A 
  href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;printable=yes">Printable 
  version</A> 
  <LI id=t-permalink><A 
  href="http://wiki.theory.org/index.php?title=BitTorrentSpecification&amp;oldid=2743">Permanent 
  link</A> </LI></UL></DIV></DIV></DIV><!-- end of the left (by default at least) column -->
<DIV class=visualClear></DIV>
<DIV id=footer>
<DIV id=f-poweredbyico><A href="http://www.mediawiki.org/"><IMG 
alt="Powered by MediaWiki" 
src="BitTorrentSpecification - TheoryOrg.files/poweredby_mediawiki_88x31.png"></A></DIV>
<DIV id=f-copyrightico><A 
href="http://creativecommons.org/licenses/by/3.0/"><IMG 
alt="Attribution 3.0 Unported" 
src="BitTorrentSpecification - TheoryOrg.files/88x31.png"></A></DIV>
<UL id=f-list>
  <LI id=lastmod>This page was last modified 23:53, 7 October 2007. 
  <LI id=viewcount>This page has been accessed 157,798 times. 
  <LI id=copyright>Content is available under <A class="external " 
  title=http://creativecommons.org/licenses/by/3.0/ 
  href="http://creativecommons.org/licenses/by/3.0/" rel=nofollow>Attribution 
  3.0 Unported</A>. 
  <LI id=privacy><A title="TheoryOrg:Privacy policy" 
  href="http://wiki.theory.org/TheoryOrg:Privacy_policy">Privacy policy</A> 
  <LI id=about><A title=TheoryOrg:About 
  href="http://wiki.theory.org/TheoryOrg:About">About TheoryOrg</A> 
  <LI id=disclaimer><A title="TheoryOrg:General disclaimer" 
  href="http://wiki.theory.org/TheoryOrg:General_disclaimer">Disclaimers</A> 
  </LI></UL></DIV>
<SCRIPT type=text/javascript>if (window.runOnloadHook) runOnloadHook();</SCRIPT>
</DIV><!-- Served by tesla in 0.255 secs. --></BODY></HTML>
